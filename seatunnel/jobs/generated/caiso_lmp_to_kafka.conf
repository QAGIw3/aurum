# CAISO staged JSON â†’ Kafka (Avro)
#
# Required environment variables:
#   CAISO_INPUT_JSON        - Path to JSON file containing normalized CAISO LMP records (array of objects)
#   KAFKA_BOOTSTRAP_SERVERS - Kafka brokers
#   SCHEMA_REGISTRY_URL     - Schema Registry endpoint
#
# Optional environment variables:
#   CAISO_TOPIC             - Kafka topic (default aurum.iso.caiso.lmp.v1)
#   CAISO_SUBJECT           - Schema Registry subject (default <topic>-value)
#   ISO_LMP_SCHEMA          - Avro schema JSON populated by run_job.sh
#   CAISO_CURRENCY          - Override currency code (default USD)
#   CAISO_UOM               - Override unit of measure (default MWh)

env {
  job.mode = "BATCH"
  parallelism = 1
}

source {
  LocalFile {
    path = "files/staging/caiso/2025-01-01.json"
    format = "json"
    json {
      json_path = "$[*]"
    }
    result_table_name = "caiso_stage"
  }
}

transform {
  Sql {
    source_table_name = "caiso_stage"
    result_table_name = "caiso_normalized"
    query = """
      SELECT
        'CAISO' AS iso_code,
        CASE
          WHEN upper(CAST(market AS STRING)) IN ('DA', 'DAY_AHEAD') THEN 'DAY_AHEAD'
          WHEN upper(CAST(market AS STRING)) IN ('RT', 'RTM', 'REAL_TIME', 'RTPD') THEN 'REAL_TIME'
          WHEN upper(CAST(market AS STRING)) IN ('FMM', 'FIFTEEN_MINUTE') THEN 'FIFTEEN_MINUTE'
          ELSE COALESCE(UPPER(CAST(market AS STRING)), 'UNKNOWN')
        END AS market,
        CAST(delivery_date AS INT) AS delivery_date,
        CAST(interval_start AS BIGINT) AS interval_start,
        CASE
          WHEN interval_end IS NULL OR CAST(interval_end AS BIGINT) = 0 THEN NULL
          ELSE CAST(interval_end AS BIGINT)
        END AS interval_end,
        CAST(interval_minutes AS INT) AS interval_minutes,
        CAST(location_id AS STRING) AS location_id,
        CAST(location_name AS STRING) AS location_name,
        COALESCE(UPPER(CAST(location_type AS STRING)), 'NODE') AS location_type,
        CAST(price_total AS DOUBLE) AS price_total,
        CAST(price_energy AS DOUBLE) AS price_energy,
        CAST(price_congestion AS DOUBLE) AS price_congestion,
        CAST(price_loss AS DOUBLE) AS price_loss,
        COALESCE(CAST(currency AS STRING), 'USD') AS currency,
        COALESCE(CAST(uom AS STRING), 'MWh') AS uom,
        CAST(settlement_point AS STRING) AS settlement_point,
        CAST(source_run_id AS STRING) AS source_run_id,
        COALESCE(CAST(ingest_ts AS BIGINT), CAST(UNIX_TIMESTAMP() * 1000000 AS BIGINT)) AS ingest_ts,
        CAST(record_hash AS STRING) AS record_hash,
        CASE
          WHEN metadata IS NULL THEN NULL
          ELSE CAST(metadata AS MAP<STRING, STRING>)
        END AS metadata
      FROM caiso_stage
    """
  }
}

sink {
  Kafka {
    bootstrap.servers = "host.docker.internal:29092"
    topic = "aurum.iso.caiso.lmp.v1"
    semantic = "AT_LEAST_ONCE"
    format = "avro"
    avro {
      use.schema.registry = true
      schema.registry.url = "http://host.docker.internal:8081"
      value.schema.subject = "aurum.iso.caiso.lmp.v1-value"
      value.schema = """{
  "type": "record",
  "name": "IsoLmpRecord",
  "namespace": "aurum.iso",
  "doc": "Normalized locational marginal price observation from an ISO day-ahead or real-time feed.",
  "fields": [
    {
      "name": "iso_code",
      "type": {
        "type": "enum",
        "name": "IsoCode",
        "doc": "Market operator the observation belongs to.",
        "symbols": [
          "PJM",
          "CAISO",
          "ERCOT",
          "NYISO",
          "MISO",
          "ISONE",
          "SPP"
        ]
      }
    },
    {
      "name": "market",
      "type": {
        "type": "enum",
        "name": "IsoMarket",
        "doc": "Normalized market/run identifier reported by the ISO.",
        "symbols": [
          "DAY_AHEAD",
          "REAL_TIME",
          "FIFTEEN_MINUTE",
          "FIVE_MINUTE",
          "HOUR_AHEAD",
          "SETTLEMENT",
          "UNKNOWN"
        ]
      }
    },
    {
      "name": "delivery_date",
      "doc": "Trading or operating date for the interval (ISO local calendar).",
      "type": {
        "type": "int",
        "logicalType": "date"
      }
    },
    {
      "name": "interval_start",
      "doc": "UTC timestamp when the interval starts.",
      "type": {
        "type": "long",
        "logicalType": "timestamp-micros"
      }
    },
    {
      "name": "interval_end",
      "doc": "Optional UTC timestamp when the interval ends (exclusive).",
      "type": [
        "null",
        {
          "type": "long",
          "logicalType": "timestamp-micros"
        }
      ],
      "default": null
    },
    {
      "name": "interval_minutes",
      "doc": "Duration of the interval in minutes (if supplied by the ISO).",
      "type": [
        "null",
        "int"
      ],
      "default": null
    },
    {
      "name": "location_id",
      "doc": "Primary identifier (node, zone, hub) from the ISO feed.",
      "type": "string"
    },
    {
      "name": "location_name",
      "doc": "Human-readable description of the location.",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "location_type",
      "doc": "Classification of the location identifier.",
      "type": {
        "type": "enum",
        "name": "IsoLocationType",
        "symbols": [
          "NODE",
          "ZONE",
          "HUB",
          "SYSTEM",
          "AGGREGATE",
          "INTERFACE",
          "RESOURCE",
          "OTHER"
        ]
      },
      "default": "OTHER"
    },
    {
      "name": "price_total",
      "doc": "Locational marginal price reported by the ISO.",
      "type": "double"
    },
    {
      "name": "price_energy",
      "doc": "Energy component of the price.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "price_congestion",
      "doc": "Congestion component of the price.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "price_loss",
      "doc": "Loss component of the price.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "currency",
      "doc": "ISO reported currency (ISO-4217 code).",
      "type": "string",
      "default": "USD"
    },
    {
      "name": "uom",
      "doc": "Unit of measure for the price.",
      "type": "string",
      "default": "MWh"
    },
    {
      "name": "settlement_point",
      "doc": "Optional ISO-specific settlement point grouping.",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "source_run_id",
      "doc": "Identifier for the source extraction run (file, report id, etc.).",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "ingest_ts",
      "doc": "Timestamp when the record entered the pipeline (UTC).",
      "type": {
        "type": "long",
        "logicalType": "timestamp-micros"
      }
    },
    {
      "name": "record_hash",
      "doc": "Deterministic hash of the source fields for idempotency.",
      "type": "string"
    },
    {
      "name": "metadata",
      "doc": "Optional key/value metadata captured from the source feed.",
      "type": [
        "null",
        {
          "type": "map",
          "values": "string"
        }
      ],
      "default": null
    }
  ]
}"""
    }
    producer {
      linger.ms = 500
      batch.size = 32768
      retries = 5
    }
  }
}
