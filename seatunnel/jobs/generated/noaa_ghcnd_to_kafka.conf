# NOAA GHCND daily observations â†’ Kafka
#
# Render with envsubst (see scripts/seatunnel/run_job.sh) before running via SeaTunnel.
# Required environment variables:
#   NOAA_GHCND_TOKEN        - NOAA API token with GHCND access
#   NOAA_GHCND_BASE_URL     - Base URL for the NOAA datasets API (default https://www.ncdc.noaa.gov/cdo-web/api/v2)
#   NOAA_GHCND_DATASET      - Dataset id (default GHCND)
#   NOAA_GHCND_START_DATE   - Start date (YYYY-MM-DD)
#   NOAA_GHCND_END_DATE     - End date (YYYY-MM-DD)
#   NOAA_GHCND_LIMIT        - Page size (default 1000, max per NOAA API)
#   NOAA_GHCND_OFFSET       - Offset for pagination (default 1)
#   NOAA_GHCND_STATION_LIMIT- Number of station metadata rows to fetch (default 1000)
#   NOAA_GHCND_TOPIC        - Kafka topic to write (e.g. aurum.ref.noaa.weather.v1)
#   KAFKA_BOOTSTRAP_SERVERS - Comma separated brokers (host:port)
#   SCHEMA_REGISTRY_URL     - Confluent Schema Registry endpoint
#
# Optional environment variables:
#   NOAA_GHCND_STATION      - Filter for specific station id
#   NOAA_GHCND_UNITS        - Measurement units (metric/standard)
#   NOAA_GHCND_DATA_TYPES   - Comma separated list of data types to include (edit rendered config to use)
#   NOAA_GHCND_TIMEOUT      - Request timeout milliseconds (default 30000)
#   NOAA_GHCND_UNIT_CODE    - Unit string to store in the Avro payload (default "unknown")
#   NOAA_GHCND_SUBJECT      - Schema Registry subject override (default <topic>-value)
#   NOAA_GHCND_SCHEMA       - Avro schema JSON populated by run_job.sh

env {
  job.mode = "BATCH"
  parallelism = 1
}

source {
  Http {
    url = "https://www.ncdc.noaa.gov/cdo-web/api/v2/data"
    method = "GET"
    headers {
      token = "WmqlBdzlnQDDRiHOtAhCjBTmbSDrtSCp"
    }
    params {
      datasetid = "GHCND"
      startdate = "2024-01-01"
      enddate = "2024-01-01"
      limit = 1000
      offset = 1
    }
    # Optional filters can be added by editing the rendered config.

    connection_timeout_ms = 30000
    # SeaTunnel Zeta Http expects integer retry count
    retry = 5
    format = "json"
    # Zeta engine requires schema/jsonpath at top-level for JSON format
    schema = {
      fields {
        station = string
        datatype = string
        attributes = string
        date = string
        value = double
      }
    }
    jsonpath = "$.results[*]"
    result_table_name = "noaa_raw"
  }
  Http {
    url = "https://www.ncdc.noaa.gov/cdo-web/api/v2/stations"
    method = "GET"
    headers {
      token = "WmqlBdzlnQDDRiHOtAhCjBTmbSDrtSCp"
    }
    params {
      datasetid = "GHCND"
      startdate = "2024-01-01"
      enddate = "2024-01-01"
      limit = 1000
    }
    connection_timeout_ms = 30000
    retry = 5
    format = "json"
    schema = {
      fields {
        id = string
        name = string
        latitude = double
        longitude = double
        elevation = double
      }
    }
    jsonpath = "$.results[*]"
    result_table_name = "noaa_stations"
  }
}

transform {
  Sql {
    # Explicitly wire both sources for Zeta engine graph validation
    plugin_input = ["noaa_raw", "noaa_stations"]
    source_table_name = "noaa_raw"
    result_table_name = "noaa_normalized"
    query = """
      SELECT
        raw.station                                                  AS station_id,
        meta.station_name                                            AS station_name,
        meta.latitude                                                AS latitude,
        meta.longitude                                               AS longitude,
        meta.elevation_m                                             AS elevation_m,
        'GHCND'                                      AS dataset,
        DATEDIFF(TO_DATE(SUBSTRING(raw.date, 1, 10)), TO_DATE('1970-01-01')) AS date,
        UPPER(raw.datatype)                                          AS element,
        CAST(raw.value AS DOUBLE)                                    AS value,
        CAST(raw.value AS STRING)                                    AS raw_value,
        'unknown'                                    AS unit,
        CASE
          WHEN raw.date IS NOT NULL THEN CAST(UNIX_TIMESTAMP(SUBSTRING(raw.date, 1, 19), "yyyy-MM-dd'T'HH:mm:ss") * 1000000 AS BIGINT)
          ELSE NULL
        END                                                          AS observation_time,
        NULL                                                         AS measurement_flag,
        NULL                                                         AS quality_flag,
        NULL                                                         AS source_flag,
        CASE
          WHEN raw.attributes IS NULL OR raw.attributes = '' THEN NULL
          ELSE map('raw', raw.attributes)
        END                                                          AS attributes,
        CAST(UNIX_TIMESTAMP() * 1000000 AS BIGINT)                    AS ingest_ts
      FROM noaa_raw AS raw
      LEFT JOIN (
        SELECT
          id AS station_id,
          name AS station_name,
          CAST(latitude AS DOUBLE) AS latitude,
          CAST(longitude AS DOUBLE) AS longitude,
          CAST(elevation AS DOUBLE) AS elevation_m
        FROM noaa_stations
      ) AS meta
      ON raw.station = meta.station_id
    """
  }
}

sink {
  Kafka {
    # Wire the output table explicitly for Zeta engine
    plugin_input = "noaa_normalized"
    bootstrap.servers = "aurum-kafka-kafka-bootstrap:9092"
    topic = "aurum.ref.noaa.weather.v1"
    semantic = "AT_LEAST_ONCE"
    format = "avro"
    avro {
      use.schema.registry = true
      schema.registry.url = "http://schema-registry:8081"
      value.schema.subject = "aurum.ref.noaa.weather.v1-value"
      value.schema = """{
  "type": "record",
  "name": "NoaaDailyObservation",
  "namespace": "aurum.ref.noaa",
  "doc": "Daily NOAA GHCND weather measurement normalized for ingestion.",
  "fields": [
    {
      "name": "station_id",
      "doc": "GHCND station identifier.",
      "type": "string"
    },
    {
      "name": "station_name",
      "doc": "Optional descriptive name for the station.",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "latitude",
      "doc": "Station latitude in decimal degrees.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "longitude",
      "doc": "Station longitude in decimal degrees.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "elevation_m",
      "doc": "Elevation above sea level in meters.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "dataset",
      "doc": "NOAA dataset identifier (e.g. GHCND).",
      "type": "string",
      "default": "GHCND"
    },
    {
      "name": "date",
      "doc": "Local observation date.",
      "type": {
        "type": "int",
        "logicalType": "date"
      }
    },
    {
      "name": "element",
      "doc": "Measurement element reported by NOAA.",
      "type": {
        "type": "enum",
        "name": "NoaaElement",
        "symbols": [
          "PRCP",
          "SNOW",
          "SNWD",
          "TMAX",
          "TMIN",
          "TAVG",
          "TOBS",
          "AWND",
          "WDF1",
          "WDF2",
          "WDF5",
          "WSF1",
          "WSF2",
          "WSF5",
          "WT01",
          "WT02",
          "WT03",
          "WT04",
          "WT05",
          "WT06",
          "WT07",
          "WT08",
          "WT09",
          "WT10",
          "WT11",
          "WT12",
          "WT13",
          "WT14",
          "WT15",
          "WT16",
          "WT17",
          "WT18",
          "WT19",
          "WT21",
          "WT22",
          "WT23",
          "WT24",
          "UNKNOWN"
        ]
      }
    },
    {
      "name": "value",
      "doc": "Value reported by NOAA standardized to SI/imperial units per element.",
      "type": [
        "null",
        "double"
      ],
      "default": null
    },
    {
      "name": "raw_value",
      "doc": "Original value from NOAA prior to scaling or cleaning.",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "unit",
      "doc": "Unit of measure for the normalized value (e.g. mm, degC).",
      "type": "string"
    },
    {
      "name": "observation_time",
      "doc": "Optional observation timestamp when provided.",
      "type": [
        "null",
        {
          "type": "long",
          "logicalType": "timestamp-micros"
        }
      ],
      "default": null
    },
    {
      "name": "measurement_flag",
      "doc": "Measurement flag emitted by NOAA (A, B, etc).",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "quality_flag",
      "doc": "Quality flag from NOAA cross checks.",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "source_flag",
      "doc": "Source flag from NOAA providing collection channel.",
      "type": [
        "null",
        "string"
      ],
      "default": null
    },
    {
      "name": "attributes",
      "doc": "Additional key/value attributes exposed by NOAA.",
      "type": [
        "null",
        {
          "type": "map",
          "values": "string"
        }
      ],
      "default": null
    },
    {
      "name": "ingest_ts",
      "doc": "Timestamp when the observation was ingested (UTC).",
      "type": {
        "type": "long",
        "logicalType": "timestamp-micros"
      }
    }
  ]
}"""
    }
    producer {
      linger.ms = 500
      batch.size = 32768
      retries = 5
    }
  }
}
