# SPP staged JSON â†’ Kafka (Avro)
#
# Required environment variables:
#   SPP_INPUT_JSON          - Path to JSON file containing normalized SPP LMP records (array of objects)
#   KAFKA_BOOTSTRAP_SERVERS - Kafka brokers
#   SCHEMA_REGISTRY_URL     - Schema Registry endpoint
#
# Optional environment variables:
#   SPP_TOPIC               - Kafka topic (default aurum.iso.spp.lmp.v1)
#   SPP_SUBJECT             - Schema Registry subject (default <topic>-value)
#   ISO_LMP_SCHEMA          - Avro schema JSON populated by run_job.sh
#   SPP_CURRENCY            - Override currency code (default USD)
#   SPP_UOM                 - Override unit of measure (default MWh)

env {
  job.mode = "BATCH"
  parallelism = 1
}

source {
  LocalFile {
    path = "${SPP_INPUT_JSON}"
    format = "json"
    json {
      json_path = "$$[*]"
    }
    result_table_name = "spp_stage"
  }
}

transform {
  Sql {
    source_table_name = "spp_stage"
    result_table_name = "spp_normalized"
    query = """
      SELECT
        'SPP' AS iso_code,
        CASE
          WHEN upper(CAST(market AS STRING)) IN ('DA', 'DAM', 'DAY_AHEAD') THEN 'DAY_AHEAD'
          WHEN upper(CAST(market AS STRING)) IN ('RT', 'RTM', 'REAL_TIME') THEN 'REAL_TIME'
          ELSE COALESCE(UPPER(CAST(market AS STRING)), 'UNKNOWN')
        END AS market,
        CAST(delivery_date AS INT) AS delivery_date,
        CAST(interval_start AS BIGINT) AS interval_start,
        CASE
          WHEN interval_end IS NULL OR CAST(interval_end AS BIGINT) = 0 THEN NULL
          ELSE CAST(interval_end AS BIGINT)
        END AS interval_end,
        CAST(interval_minutes AS INT) AS interval_minutes,
        CAST(location_id AS STRING) AS location_id,
        CAST(location_name AS STRING) AS location_name,
        COALESCE(UPPER(CAST(location_type AS STRING)), 'NODE') AS location_type,
        CAST(price_total AS DOUBLE) AS price_total,
        CAST(price_energy AS DOUBLE) AS price_energy,
        CAST(price_congestion AS DOUBLE) AS price_congestion,
        CAST(price_loss AS DOUBLE) AS price_loss,
        COALESCE(CAST(currency AS STRING), '${SPP_CURRENCY}') AS currency,
        COALESCE(CAST(uom AS STRING), '${SPP_UOM}') AS uom,
        CAST(settlement_point AS STRING) AS settlement_point,
        CAST(source_run_id AS STRING) AS source_run_id,
        COALESCE(CAST(ingest_ts AS BIGINT), CAST(UNIX_TIMESTAMP() * 1000000 AS BIGINT)) AS ingest_ts,
        CAST(record_hash AS STRING) AS record_hash,
        NULL AS metadata
      FROM spp_stage
    """
  }
}

sink {
  Kafka {
    bootstrap.servers = "${KAFKA_BOOTSTRAP_SERVERS}"
    topic = "${SPP_TOPIC}"
    semantic = "AT_LEAST_ONCE"
    format = "avro"
    avro {
      use.schema.registry = true
      schema.registry.url = "${SCHEMA_REGISTRY_URL}"
      value.schema.subject = "${SPP_SUBJECT}"
      value.schema = """${ISO_LMP_SCHEMA}"""
    }
    producer {
      linger.ms = 500
      batch.size = 32768
      retries = 5
    }
  }
}
