# AESO system marginal price (SMP) â†’ Kafka (Avro)

env {
  job.mode = "BATCH"
  parallelism = 1
}

source {
  Http {
    url = "${AESO_ENDPOINT}"
    method = "GET"
    headers {
      X-API-Key = "${AESO_API_KEY}"
    }
    params {
      startTime = "${AESO_START}"
      endTime = "${AESO_END}"
    }
    connection_timeout_ms = 20000
    retry { interval_ms = 10000, max_retries = 12 }
    format = "json"
    schema = { fields { begin_datetime_utc = string end_datetime_utc = string system_marginal_price = string } }
    jsonpath = "$$.data[*]"
    result_table_name = "aeso_raw"
  }
}

transform {
  Sql {
    source_table_name = "aeso_raw"
    result_table_name = "aeso_normalized"
    query = """
      SELECT
        'AESO' AS iso_code,
        'REAL_TIME' AS market,
        DATEDIFF(TO_DATE(SUBSTRING(COALESCE(end, datetime, timestamp, time, effectiveAt, observedAt), 1, 10)), TO_DATE('1970-01-01')) AS delivery_date,
        CAST(UNIX_TIMESTAMP(SUBSTRING(COALESCE(begin, start, start_time, startTime, intervalStart), 1, 19), 'yyyy-MM-dd''T''HH:mm:ss') * 1000000 AS BIGINT) AS interval_start,
        CAST(UNIX_TIMESTAMP(SUBSTRING(COALESCE(end, end_time, endTime, intervalEnd), 1, 19), 'yyyy-MM-dd''T''HH:mm:ss') * 1000000 AS BIGINT) AS interval_end,
        CAST(5 AS INT) AS interval_minutes,
        'AESO_SYSTEM' AS location_id,
        'AESO System' AS location_name,
        'SYSTEM' AS location_type,
        CAST(NULL AS STRING) AS zone,
        CAST(NULL AS STRING) AS hub,
        CAST(NULL AS STRING) AS timezone,
        CAST(COALESCE(smp, price, value, poolPrice) AS DOUBLE) AS price_total,
        CAST(NULL AS DOUBLE) AS price_energy,
        CAST(NULL AS DOUBLE) AS price_congestion,
        CAST(NULL AS DOUBLE) AS price_loss,
        'CAD' AS currency,
        'MWh' AS uom,
        CAST(NULL AS STRING) AS settlement_point,
        CAST(NULL AS STRING) AS source_run_id,
        CAST(UNIX_TIMESTAMP() * 1000000 AS BIGINT) AS ingest_ts,
        SHA2(CONCAT_WS('|', COALESCE(begin, start, startTime), 'AESO_SYSTEM', CAST(COALESCE(smp, price, value, poolPrice) AS STRING)), 256) AS record_hash,
        NULL AS metadata
      FROM aeso_raw
      WHERE COALESCE(smp, price, value, poolPrice) IS NOT NULL
    """
  }
}

sink {
  Kafka {
    plugin_input = "aeso_normalized"
    bootstrap.servers = "${KAFKA_BOOTSTRAP_SERVERS}"
    topic = "${AESO_TOPIC}"
    semantic = "AT_LEAST_ONCE"
    format = "avro"
    avro {
      use.schema.registry = true
      schema.registry.url = "${SCHEMA_REGISTRY_URL}"
      value.schema.subject = "${AESO_SUBJECT}"
      value.schema = """${ISO_LMP_SCHEMA}"""
    }
  }
}

