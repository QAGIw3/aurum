# ISO generation mix topics â†’ TimescaleDB (JDBC)
#
# Required environment variables:
#   AURUM_KAFKA_BOOTSTRAP_SERVERS    - Kafka brokers
#   AURUM_SCHEMA_REGISTRY_URL        - Schema Registry endpoint
#   TIMESCALE_JDBC_URL               - JDBC URL for TimescaleDB
#   TIMESCALE_USER                   - DB user
#   TIMESCALE_PASSWORD               - DB password
#
# Optional environment variables:
#   ISO_GENMIX_TOPIC_PATTERN         - Regex pattern for topics (default aurum\\.iso\\..*\\.genmix\\.v1)
#   TABLE_NAME                       - Destination table (default public.iso_generation_mix)

env {
  job.mode = "STREAMING"
  checkpoint.interval = 60000
}

source {
  Kafka {
    bootstrap.servers = "${AURUM_KAFKA_BOOTSTRAP_SERVERS}"
    topic = "${ISO_GENMIX_TOPIC_PATTERN:-aurum\\.iso\\..*\\.genmix\\.v1}"
    format = "avro"
    start_mode = "latest"
    avro {
      schema.registry.url = "${AURUM_SCHEMA_REGISTRY_URL}"
    }
    result_table_name = "genmix_raw"
  }
}

transform {
  Sql {
    source_table_name = "genmix_raw"
    result_table_name = "genmix_enriched"
    query = """
      SELECT
        iso_code,
        TO_TIMESTAMP(asof_time / 1000000.0) AS asof_time,
        fuel_type,
        mw,
        unit,
        TO_TIMESTAMP(ingest_ts / 1000000.0) AS ingest_ts,
        CAST(metadata AS STRING) AS metadata
      FROM genmix_raw
    """
  }
}

sink {
  Jdbc {
    driver = "org.postgresql.Driver"
    url = "${TIMESCALE_JDBC_URL}"
    user = "${TIMESCALE_USER}"
    password = "${TIMESCALE_PASSWORD}"
    generate_sink_sql = true
    database = "${TIMESCALE_DB:-aurum}"
    table = "${TABLE_NAME:-public.iso_generation_mix}"
    primary_keys = ["iso_code", "fuel_type", "asof_time"]
    ext = {
      "copyWriteMode" = "upsert"
    }
    plugin_input = "genmix_enriched"
  }
}
