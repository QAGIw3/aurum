# MISO ancillary services market prices â†’ Kafka (Avro)

env {
  job.mode = "BATCH"
  parallelism = 1
}

source {
  Http {
    url = "${MISO_ASM_URL}"
    method = "GET"
    headers {
      Authorization = "${MISO_ASM_AUTH_HEADER}"
    }
    params {
      pageNumber = "${MISO_ASM_PAGE_NUMBER}"
      pageSize = "${MISO_ASM_PAGE_SIZE}"
    }
    connection_timeout_ms = 20000
    retry = 5
    retry_backoff_multiplier_ms = 1500
    retry_backoff_max_ms = 90000
    rate_limit_sleep_ms = 200
    retry = 12
    format = "json"
    schema = { fields { data = array page = object } }
    jsonpath = "$$.data[*]"
    result_table_name = "miso_asm_raw"
  }
}

transform {
  Sql {
    source_table_name = "miso_asm_raw"
    result_table_name = "miso_asm_normalized"
    query = """
      SELECT
        'MISO' AS iso_code,
        '${MISO_ASM_MARKET}' AS market,
        CAST(product AS STRING) AS product,
        CAST(zone AS STRING) AS zone,
        CAST(preliminaryFinal AS STRING) AS preliminary_final,
        TO_TIMESTAMP(COALESCE(timeInterval.end, timeInterval.start) / 1000.0) AS interval_end,
        TO_TIMESTAMP(timeInterval.start / 1000.0) AS interval_start,
        COALESCE(interval_minutes, CAST(ROUND((timeInterval.end - timeInterval.start) / 60000.0) AS INT)) AS interval_minutes,
        CAST(mcp AS DOUBLE) AS price_mcp,
        '${MISO_ASM_CURRENCY}' AS currency,
        '${MISO_ASM_UOM}' AS uom,
        TO_TIMESTAMP(UNIX_TIMESTAMP()) AS ingest_ts,
        SHA2(CONCAT_WS('|', zone, product, CAST(timeInterval.start AS STRING), CAST(mcp AS STRING), COALESCE(preliminaryFinal, '')), 256) AS record_hash,
        CAST(metadata_json AS STRING) AS metadata
      FROM (
        SELECT
          zone,
          product,
          preliminaryFinal,
          mcp,
          CAST(timeInterval.start AS BIGINT) AS start,
          CAST(timeInterval.end AS BIGINT) AS "end",
          CAST(timeInterval.resolution AS STRING) AS resolution,
          CAST(JSON_STRING(maps:="metadata") AS STRING) AS metadata_json,
          CAST(NULL AS INT) AS interval_minutes
        FROM miso_asm_raw
      )
    """
  }
}

sink {
  Kafka {
    plugin_input = "miso_asm_normalized"
    bootstrap.servers = "${AURUM_KAFKA_BOOTSTRAP_SERVERS}"
    topic = "${MISO_ASM_TOPIC}"
    format = "avro"
    avro {
      use.schema.registry = true
      schema.registry.url = "${AURUM_SCHEMA_REGISTRY_URL}"
      value.schema.subject = "${MISO_ASM_SUBJECT}"
      value.schema = """${ISO_ASM_SCHEMA}"""
      # Key configuration for message routing and partitioning
      key.serializer = "${MISO.CONF_KEY_SERIALIZER:-string}"
      key.format = "${MISO.CONF_KEY_FORMAT:-json}"
    }
  }
}
