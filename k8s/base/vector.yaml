apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: aurum-dev
data:
  vector.toml: |
    # Vector configuration shipping Kubernetes logs to ClickHouse.
    
    [sources.kubernetes_logs]
      type = "kubernetes_logs"
      extra_fields = ["pod", "namespace", "container", "node"]
      scrape_interval_secs = 10
    
    [transforms.normalize_logs]
      type = "remap"
      inputs = ["kubernetes_logs"]
      source = """
      ts = now()
      if exists(.timestamp) {
        parsed_ts, err = parse_timestamp(to_string!(.timestamp), format: "%+")
        if err == null {
          ts = parsed_ts
        }
      }
      .timestamp = ts

      service = "unknown"
      if exists(.kubernetes) && exists(.kubernetes.pod_name) {
        service = to_string!(.kubernetes.pod_name)
      } else if exists(.pod) {
        service = to_string!(.pod)
      } else if exists(.container) {
        service = to_string!(.container)
      }
      .service = service

      host_val = get_hostname()
      if exists(.node) {
        host_val = to_string!(.node)
      }
      .host = host_val

      level = null
      trace_id = null
      span_id = null
      message = to_string!(.message)
      fields = {}

      parsed, err = parse_json(.message)
      if err == null && is_object(parsed) {
        if exists(parsed.level) {
          level = to_string!(parsed.level)
          parsed = del(parsed.level)
        }
        if exists(parsed.log_level) {
          level = to_string!(parsed.log_level)
          parsed = del(parsed.log_level)
        }
        if exists(parsed.message) {
          message = to_string!(parsed.message)
          parsed = del(parsed.message)
        } else if exists(parsed.msg) {
          message = to_string!(parsed.msg)
          parsed = del(parsed.msg)
        }
        if exists(parsed.trace_id) {
          trace_id = to_string!(parsed.trace_id)
          parsed = del(parsed.trace_id)
        }
        if exists(parsed.span_id) {
          span_id = to_string!(parsed.span_id)
          parsed = del(parsed.span_id)
        }

        temp = {}
        for_each(parsed) -> |key, value| {
          if value == null {
            continue
          }
          if is_object(value) || is_array(value) {
            temp[key] = encode_json(value)
          } else {
            temp[key] = to_string!(value)
          }
        }
        fields = temp
      }

      if level == null && exists(.level) {
        level = to_string!(.level)
      }
      if level == null {
        level = "info"
      }

      if trace_id == null && exists(.trace_id) {
        trace_id = to_string!(.trace_id)
      }
      if trace_id == null {
        trace_id = ""
      }

      if span_id == null && exists(.span_id) {
        span_id = to_string!(.span_id)
      }
      if span_id == null {
        span_id = ""
      }

      if exists(.namespace) {
        fields.namespace = to_string!(.namespace)
      }
      if exists(.container) {
        fields.container = to_string!(.container)
      }

      .level = level
      .trace_id = trace_id
      .span_id = span_id
      .message = message
      .fields = fields

      if !exists(.fields) {
        .fields = {}
      }

      del(.pod)
      del(.namespace)
      del(.container)
      del(.timestamp)
      """
    
    [sinks.clickhouse]
      type = "clickhouse"
      inputs = ["normalize_logs"]
      endpoint = "http://clickhouse:8123"
      database = "ops"
      table = "logs"
      compression = "gzip"
      auth.username = "default"
      skip_unknown_fields = true
      strategy = "insert"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  namespace: aurum-dev
  labels:
    app: vector
spec:
  selector:
    matchLabels:
      app: vector
  template:
    metadata:
      labels:
        app: vector
    spec:
      serviceAccountName: vector
      tolerations:
        - operator: "Exists"
      volumes:
        - name: config
          configMap:
            name: vector-config
      containers:
        - name: vector
          image: timberio/vector:0.33.0-alpine
          args: ["--config", "/etc/vector/vector.toml"]
          volumeMounts:
            - name: config
              mountPath: /etc/vector/vector.toml
              subPath: vector.toml
          resources:
            limits:
              cpu: "500m"
              memory: "256Mi"
            requests:
              cpu: "100m"
              memory: "128Mi"
          readinessProbe:
            exec:
              command: ["vector", "validate", "/etc/vector/vector.toml"]
            initialDelaySeconds: 10
            periodSeconds: 30
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  namespace: aurum-dev
