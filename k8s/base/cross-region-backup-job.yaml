apiVersion: batch/v1
kind: Job
metadata:
  name: cross-region-backup-replication
  namespace: aurum-dev
  labels:
    app: cross-region-backup
    component: replication
spec:
  template:
    metadata:
      labels:
        app: cross-region-backup
        component: replication
    spec:
      serviceAccountName: cross-region-backup
      containers:
      - name: cross-region-backup
        image: postgres:14
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -euo pipefail

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color

          REPLICATION_TIMESTAMP=$(date -u +'%Y%m%d_%H%M%S')
          REPLICATION_ID="cross_region_replication_${REPLICATION_TIMESTAMP}"

          echo -e "${GREEN}🌍 Starting cross-region backup replication: $REPLICATION_ID${NC}"

          # Configuration
          PRIMARY_REGION="us-east-1"
          SECONDARY_REGION="us-west-2"
          BACKUP_BUCKET_PRIMARY="aurum-backups-${PRIMARY_REGION}"
          BACKUP_BUCKET_SECONDARY="aurum-backups-${SECONDARY_REGION}"

          # Function to replicate PostgreSQL backup
          replicate_postgres_backup() {
            echo -e "${YELLOW}📦 Replicating PostgreSQL backup...${NC}"

            # Find latest PostgreSQL backup in primary region
            LATEST_BACKUP=$(mc ls "aurum-minio/aurum-backups/postgresql/" | sort -k6 | tail -1 | awk '{print $6}')

            if [ -z "$LATEST_BACKUP" ]; then
              echo -e "${RED}❌ No PostgreSQL backups found in primary region${NC}"
              return 1
            fi

            echo "Found latest backup: $LATEST_BACKUP"

            # Download from primary
            mc cp "aurum-minio/aurum-backups/postgresql/$LATEST_BACKUP" "/tmp/postgres-backup.tar.gz"

            # Upload to secondary
            mc alias set aurum-secondary http://minio-secondary.aurum-dr.svc.cluster.local:9000 aurum password
            mc cp "/tmp/postgres-backup.tar.gz" "aurum-secondary/aurum-backups/postgresql/$LATEST_BACKUP"

            # Verify replication
            if mc stat "aurum-secondary/aurum-backups/postgresql/$LATEST_BACKUP" >/dev/null 2>&1; then
              echo -e "${GREEN}✅ PostgreSQL backup replicated successfully${NC}"
              return 0
            else
              echo -e "${RED}❌ PostgreSQL backup replication failed${NC}"
              return 1
            fi
          }

          # Function to replicate ClickHouse backup
          replicate_clickhouse_backup() {
            echo -e "${YELLOW}📊 Replicating ClickHouse backup...${NC}"

            # Find latest ClickHouse backup in primary region
            LATEST_BACKUP=$(mc ls "aurum-minio/aurum-backups/clickhouse/" | sort -k6 | tail -1 | awk '{print $6}')

            if [ -z "$LATEST_BACKUP" ]; then
              echo -e "${RED}❌ No ClickHouse backups found in primary region${NC}"
              return 1
            fi

            echo "Found latest backup: $LATEST_BACKUP"

            # Download from primary
            mc cp "aurum-minio/aurum-backups/clickhouse/$LATEST_BACKUP" "/tmp/clickhouse-backup.tar.gz"

            # Upload to secondary
            mc cp "/tmp/clickhouse-backup.tar.gz" "aurum-secondary/aurum-backups/clickhouse/$LATEST_BACKUP"

            # Verify replication
            if mc stat "aurum-secondary/aurum-backups/clickhouse/$LATEST_BACKUP" >/dev/null 2>&1; then
              echo -e "${GREEN}✅ ClickHouse backup replicated successfully${NC}"
              return 0
            else
              echo -e "${RED}❌ ClickHouse backup replication failed${NC}"
              return 1
            fi
          }

          # Function to replicate Kafka topics
          replicate_kafka_topics() {
            echo -e "${YELLOW}📨 Replicating Kafka topics...${NC}"

            # Get list of topics from Kafka
            TOPICS=$(kubectl exec -n aurum-dev kafka-0 -- kafka-topics --bootstrap-server localhost:9092 --list)

            for topic in $TOPICS; do
              echo "Replicating topic: $topic"

              # Create backup of topic data
              kubectl exec -n aurum-dev kafka-0 -- kafka-console-consumer \
                --bootstrap-server localhost:9092 \
                --topic "$topic" \
                --from-beginning \
                --timeout-ms 5000 \
                --consumer.config /etc/kafka/kafka.properties \
                > "/tmp/kafka-topic-backup-$topic.json" 2>/dev/null || true

              # Upload to secondary region
              if [ -f "/tmp/kafka-topic-backup-$topic.json" ]; then
                mc cp "/tmp/kafka-topic-backup-$topic.json" "aurum-secondary/aurum-backups/kafka/$topic-backup.json"
                echo "  ✅ Topic $topic replicated"
              else
                echo "  ⚠️ No data in topic $topic"
              fi
            done

            echo -e "${GREEN}✅ Kafka topics replication completed${NC}"
          }

          # Function to replicate MinIO buckets
          replicate_minio_buckets() {
            echo -e "${YELLOW}🪣 Replicating MinIO buckets...${NC}"

            # List buckets in primary
            BUCKETS=$(mc ls aurum-minio | awk '{print $5}')

            for bucket in $BUCKETS; do
              echo "Replicating bucket: $bucket"

              # Mirror bucket to secondary
              mc mirror "aurum-minio/$bucket" "aurum-secondary/$bucket" --overwrite

              echo "  ✅ Bucket $bucket replicated"
            done

            echo -e "${GREEN}✅ MinIO buckets replication completed${NC}"
          }

          # Function to verify replication integrity
          verify_replication_integrity() {
            echo -e "${YELLOW}🔍 Verifying replication integrity...${NC}"

            # Verify PostgreSQL backup
            PRIMARY_PG_SIZE=$(mc stat "aurum-minio/aurum-backups/postgresql/$(mc ls aurum-minio/aurum-backups/postgresql/ | sort -k6 | tail -1 | awk '{print $6}')" | grep -i "size" | awk '{print $2}')
            SECONDARY_PG_SIZE=$(mc stat "aurum-secondary/aurum-backups/postgresql/$(mc ls aurum-secondary/aurum-backups/postgresql/ | sort -k6 | tail -1 | awk '{print $6}')" | grep -i "size" | awk '{print $2}')

            if [ "$PRIMARY_PG_SIZE" == "$SECONDARY_PG_SIZE" ]; then
              echo "  ✅ PostgreSQL backup integrity verified"
            else
              echo -e "${RED}❌ PostgreSQL backup integrity check failed${NC}"
              return 1
            fi

            # Verify ClickHouse backup
            PRIMARY_CH_SIZE=$(mc stat "aurum-minio/aurum-backups/clickhouse/$(mc ls aurum-minio/aurum-backups/clickhouse/ | sort -k6 | tail -1 | awk '{print $6}')" | grep -i "size" | awk '{print $2}')
            SECONDARY_CH_SIZE=$(mc stat "aurum-secondary/aurum-backups/clickhouse/$(mc ls aurum-secondary/aurum-backups/clickhouse/ | sort -k6 | tail -1 | awk '{print $6}')" | grep -i "size" | awk '{print $2}')

            if [ "$PRIMARY_CH_SIZE" == "$SECONDARY_CH_SIZE" ]; then
              echo "  ✅ ClickHouse backup integrity verified"
            else
              echo -e "${RED}❌ ClickHouse backup integrity check failed${NC}"
              return 1
            fi

            echo -e "${GREEN}✅ All replication integrity checks passed${NC}"
          }

          # Function to update replication metadata
          update_replication_metadata() {
            echo -e "${YELLOW}📝 Updating replication metadata...${NC}"

            cat > /tmp/replication-metadata.json << EOF
            {
              "replication_id": "$REPLICATION_ID",
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
              "primary_region": "$PRIMARY_REGION",
              "secondary_region": "$SECONDARY_REGION",
              "replicated_components": {
                "postgresql": {
                  "status": "completed",
                  "backup_file": "$(mc ls aurum-minio/aurum-backups/postgresql/ | sort -k6 | tail -1 | awk '{print $6}')",
                  "size_bytes": "$(mc stat "aurum-minio/aurum-backups/postgresql/$(mc ls aurum-minio/aurum-backups/postgresql/ | sort -k6 | tail -1 | awk '{print $6}')" | grep -i "size" | awk '{print $2}')"
                },
                "clickhouse": {
                  "status": "completed",
                  "backup_file": "$(mc ls aurum-minio/aurum-backups/clickhouse/ | sort -k6 | tail -1 | awk '{print $6}')",
                  "size_bytes": "$(mc stat "aurum-minio/aurum-backups/clickhouse/$(mc ls aurum-minio/aurum-backups/clickhouse/ | sort -k6 | tail -1 | awk '{print $6}')" | grep -i "size" | awk '{print $2}')"
                },
                "kafka": {
                  "status": "completed",
                  "topics_count": "$(kubectl exec -n aurum-dev kafka-0 -- kafka-topics --bootstrap-server localhost:9092 --list | wc -l)"
                },
                "minio": {
                  "status": "completed",
                  "buckets_count": "$(mc ls aurum-minio | wc -l)"
                }
              },
              "integrity_checks": {
                "postgresql": "passed",
                "clickhouse": "passed",
                "overall": "passed"
              },
              "replication_duration_seconds": "$SECONDS"
            }
            EOF

            # Store metadata in both regions
            mc cp /tmp/replication-metadata.json "aurum-minio/aurum-backups/replication-metadata.json"
            mc cp /tmp/replication-metadata.json "aurum-secondary/aurum-backups/replication-metadata.json"

            echo -e "${GREEN}✅ Replication metadata updated${NC}"
          }

          # Main execution
          echo -e "${GREEN}🚀 Starting cross-region replication: $REPLICATION_ID${NC}"

          # Set up MinIO access
          mc alias set aurum-minio http://minio.aurum-dev.svc.cluster.local:9000 aurum password

          # Phase 1: PostgreSQL replication
          echo -e "${BLUE}📦 Phase 1: PostgreSQL backup replication${NC}"
          if ! replicate_postgres_backup; then
            echo -e "${RED}❌ PostgreSQL replication failed${NC}"
            exit 1
          fi

          # Phase 2: ClickHouse replication
          echo -e "${BLUE}📊 Phase 2: ClickHouse backup replication${NC}"
          if ! replicate_clickhouse_backup; then
            echo -e "${RED}❌ ClickHouse replication failed${NC}"
            exit 1
          fi

          # Phase 3: Kafka topics replication
          echo -e "${BLUE}📨 Phase 3: Kafka topics replication${NC}"
          replicate_kafka_topics

          # Phase 4: MinIO buckets replication
          echo -e "${BLUE}🪣 Phase 4: MinIO buckets replication${NC}"
          replicate_minio_buckets

          # Phase 5: Integrity verification
          echo -e "${BLUE}🔍 Phase 5: Integrity verification${NC}"
          if ! verify_replication_integrity; then
            echo -e "${RED}❌ Integrity verification failed${NC}"
            exit 1
          fi

          # Phase 6: Metadata update
          echo -e "${BLUE}📝 Phase 6: Metadata update${NC}"
          update_replication_metadata

          # Generate final report
          echo -e "${GREEN}📊 Cross-region replication summary:${NC}"
          echo "  Replication ID: $REPLICATION_ID"
          echo "  Duration: ${SECONDS}s"
          echo "  Status: ✅ COMPLETED"
          echo "  Components replicated: PostgreSQL, ClickHouse, Kafka, MinIO"
          echo "  Data integrity: ✅ VERIFIED"

          echo -e "${GREEN}✅ Cross-region backup replication completed successfully!${NC}"

          exit 0
        env:
        - name: MC_HOST_aurum
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: access_key
        - name: MC_HOST_aurum-secondary
          valueFrom:
            secretKeyRef:
              name: minio-secondary-secrets
              key: access_key
        volumeMounts:
        - name: backup-storage
          mountPath: /tmp
      volumes:
      - name: backup-storage
        emptyDir: {}
      restartPolicy: OnFailure
  backoffLimit: 3
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cross-region-backup-replication-schedule
  namespace: aurum-dev
  labels:
    app: cross-region-backup
    component: replication
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: cross-region-backup
            component: replication
        spec:
          serviceAccountName: cross-region-backup
          containers:
          - name: cross-region-backup-scheduled
            image: postgres:14
            command: ["/bin/bash", "-c"]
            args:
            - |
              echo "Starting scheduled cross-region backup replication..."
              kubectl create job cross-region-backup-replication-$(date +%s) --from=cronjob/cross-region-backup-replication-schedule -n aurum-dev
            volumeMounts: []
          volumes: []
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 7  # Keep last 7 successful jobs
  failedJobsHistoryLimit: 14     # Keep last 14 failed jobs
