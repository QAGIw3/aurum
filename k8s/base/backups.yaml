apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aurum-backups
  namespace: aurum-dev
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: aurum-local
  resources:
    requests:
      storage: 50Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: aurum-dev
spec:
  schedule: "0 3 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: pgdump
              image: postgres:15
              command: ["/bin/bash", "-c"]
              args:
                - |
                  set -euo pipefail
                  timestamp=$(date +"%Y%m%d%H%M%S")
                  mkdir -p /backups/postgres
                  export PGPASSWORD="${POSTGRES_PASSWORD}"
                  pg_dumpall -h postgres -U "${POSTGRES_USER}" \
                    > "/backups/postgres/postgres-${timestamp}.sql"
                  find /backups/postgres -type f -name 'postgres-*.sql' -mtime +7 -delete
              env:
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: aurum-secrets
                      key: POSTGRES_USER
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: aurum-secrets
                      key: POSTGRES_PASSWORD
              volumeMounts:
                - name: backups
                  mountPath: /backups
          volumes:
            - name: backups
              persistentVolumeClaim:
                claimName: aurum-backups
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: timescale-backup
  namespace: aurum-dev
spec:
  schedule: "30 3 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: pgdump
              image: timescale/timescaledb:latest-pg15
              command: ["/bin/bash", "-c"]
              args:
                - |
                  set -euo pipefail
                  timestamp=$(date +"%Y%m%d%H%M%S")
                  mkdir -p /backups/timescale
                  export PGPASSWORD="${TIMESCALE_PASSWORD}"
                  pg_dump -h timescale -U "${TIMESCALE_USER}" "${TIMESCALE_DB}" \
                    > "/backups/timescale/timescale-${timestamp}.sql"
                  find /backups/timescale -type f -name 'timescale-*.sql' -mtime +7 -delete
              env:
                - name: TIMESCALE_DB
                  valueFrom:
                    configMapKeyRef:
                      name: aurum-config
                      key: TIMESCALE_DB
                - name: TIMESCALE_USER
                  valueFrom:
                    secretKeyRef:
                      name: aurum-secrets
                      key: TIMESCALE_USER
                - name: TIMESCALE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: aurum-secrets
                      key: TIMESCALE_PASSWORD
              volumeMounts:
                - name: backups
                  mountPath: /backups
          volumes:
            - name: backups
              persistentVolumeClaim:
                claimName: aurum-backups
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: minio-backup
  namespace: aurum-dev
spec:
  schedule: "0 4 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: mc
              image: minio/mc:RELEASE.2024-01-18T22-51-28Z
              command: ["/bin/sh", "-c"]
              args:
                - |
                  set -euo pipefail
                  timestamp=$(date +"%Y%m%d%H%M%S")
                  dest="/backups/minio/${timestamp}"
                  mkdir -p "${dest}"
                  mc alias set local http://minio:9000 "${AURUM_S3_ACCESS_KEY}" "${AURUM_S3_SECRET_KEY}"
                  mc mirror --overwrite --remove local/aurum "${dest}"
                  find /backups/minio -mindepth 1 -maxdepth 1 -type d -mtime +7 -exec rm -rf {} +
              env:
                - name: AURUM_S3_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aurum-secrets
                      key: AURUM_S3_ACCESS_KEY
                - name: AURUM_S3_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aurum-secrets
                      key: AURUM_S3_SECRET_KEY
              volumeMounts:
                - name: backups
                  mountPath: /backups
          volumes:
            - name: backups
              persistentVolumeClaim:
                claimName: aurum-backups
