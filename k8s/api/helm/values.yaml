replicaCount: 3

# Enhanced autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2
  maxUnavailable: 1

# Security context
securityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

# Pod security standards
podSecurityStandards: restricted

# Health checks
livenessProbe:
  enabled: true
  httpGet:
    path: /live
    port: http
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: http
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /ready
    port: http
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

nameOverride: ""
fullnameOverride: ""

image:
  repository: ghcr.io/aurum/aurum-api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080
  annotations: {}

config:
  AURUM_API_TRINO_HOST: trino.aurum-dev.svc.cluster.local
  AURUM_API_TRINO_PORT: "8080"
  AURUM_API_TRINO_USER: aurum
  AURUM_API_TRINO_SCHEME: http
  AURUM_APP_DB_DSN: postgresql://aurum@postgres.aurum-dev.svc.cluster.local:5432/aurum
  AURUM_API_REDIS_URL: redis://redis.aurum-dev.svc.cluster.local:6379/0
  AURUM_API_CACHE_TTL: "60"
  AURUM_API_ISO_LMP_CACHE_TTL: "60"
  AURUM_API_ISO_LMP_INMEM_TTL: "30"
  AURUM_API_RATE_LIMIT_RPS: "10"
  AURUM_API_RATE_LIMIT_BURST: "20"
  AURUM_API_CORS_ORIGINS: "*"
  AURUM_API_INMEMORY_TTL: "60"
  AURUM_API_GZIP_MIN_BYTES: "500"
  AURUM_API_SCENARIO_OUTPUTS_ENABLED: "1"
  AURUM_API_OIDC_ISSUER: ""
  AURUM_API_OIDC_AUDIENCE: ""
  AURUM_API_OIDC_JWKS_URL: ""
  AURUM_API_JWT_LEEWAY: "60"
  AURUM_API_AUTH_DISABLED: "0"
  AURUM_API_ADMIN_GROUP: aurum-admins
  KAFKA_EXTERNAL_BOOTSTRAP: kafka.aurum.localtest.me:31092
  SCHEMA_REGISTRY_EXTERNAL_URL: http://schema-registry.aurum.localtest.me
  AURUM_OTEL_SERVICE_NAME: aurum-api
  AURUM_OTEL_EXPORTER_ENDPOINT: http://jaeger-collector.aurum-dev.svc.cluster.local:4317
  AURUM_OTEL_EXPORTER_INSECURE: "true"
  AURUM_API_CONCURRENCY_ENABLED: "1"
  AURUM_API_CONCURRENCY_MAX_CONCURRENT_REQUESTS: "120"
  AURUM_API_CONCURRENCY_MAX_REQUESTS_PER_SECOND: "15"
  AURUM_API_CONCURRENCY_MAX_REQUEST_DURATION_SECONDS: "30"
  AURUM_API_CONCURRENCY_MAX_REQUESTS_PER_TENANT: "20"
  AURUM_API_CONCURRENCY_TENANT_BURST_LIMIT: "50"
  AURUM_API_CONCURRENCY_TENANT_QUEUE_LIMIT: "64"
  AURUM_API_CONCURRENCY_QUEUE_TIMEOUT_SECONDS: "2.0"
  AURUM_API_CONCURRENCY_BURST_REFILL_PER_SECOND: "0.5"
  AURUM_API_CONCURRENCY_SLOW_START_INITIAL_LIMIT: "2"
  AURUM_API_CONCURRENCY_SLOW_START_STEP_SECONDS: "3.0"
  AURUM_API_CONCURRENCY_SLOW_START_STEP_SIZE: "1"
  AURUM_API_CONCURRENCY_SLOW_START_COOLDOWN_SECONDS: "30.0"
  AURUM_API_CONCURRENCY_REDIS_ENABLED: "1"
  AURUM_API_CONCURRENCY_REDIS_URL: redis://redis.aurum-dev.svc.cluster.local:6379/0
  AURUM_API_CONCURRENCY_REDIS_NAMESPACE: aurum:api:concurrency
  AURUM_API_CONCURRENCY_REDIS_POLL_INTERVAL_SECONDS: "0.05"
  AURUM_API_CONCURRENCY_REDIS_QUEUE_STALE_SECONDS: "2.0"
  AURUM_API_CONCURRENCY_REDIS_QUEUE_TTL_SECONDS: "30.0"
  AURUM_API_CONCURRENCY_BACKPRESSURE_RATIO_THRESHOLD: "0"
  AURUM_API_CONCURRENCY_BACKPRESSURE_HEADER: "X-Backpressure"
  AURUM_API_OFFLOAD_ENABLED: "0"
  AURUM_API_OFFLOAD_USE_STUB: "1"
  AURUM_API_OFFLOAD_CELERY_BROKER_URL: redis://redis.aurum-dev.svc.cluster.local:6379/0
  AURUM_API_OFFLOAD_CELERY_RESULT_BACKEND: redis://redis.aurum-dev.svc.cluster.local:6379/1
  AURUM_API_OFFLOAD_DEFAULT_QUEUE: default

secrets:
  AURUM_API_OIDC_CLIENT_ID: changeme-client
  AURUM_API_OIDC_CLIENT_SECRET: changeme-secret
  AURUM_API_JWT_SECRET: change-me
  TRINO_PASSWORD: ""
  REDIS_PASSWORD: ""
  AURUM_APP_DB_DSN: postgresql://aurum:aurum@postgres.aurum-dev.svc.cluster.local:5432/aurum

# Vault integration for secrets management
vault:
  enabled: true
  role: aurum-api
  agent:
    enabled: true
    configMap: vault-agent-config
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: aurum-api
      vault.hashicorp.com/agent-inject-secret-config: aurum/config
      vault.hashicorp.com/agent-inject-template-config: |
        {{- with secret "aurum/config" -}}
        export AURUM_API_JWT_SECRET="{{ .Data.data.jwt_secret }}"
        export AURUM_API_OIDC_CLIENT_ID="{{ .Data.data.oidc_client_id }}"
        export AURUM_API_OIDC_CLIENT_SECRET="{{ .Data.data.oidc_client_secret }}"
        {{- end }}
  secrets:
    - path: aurum/config
      template: |
        {{- with secret "aurum/config" -}}
        AURUM_API_JWT_SECRET={{ .Data.data.jwt_secret }}
        AURUM_API_OIDC_CLIENT_ID={{ .Data.data.oidc_client_id }}
        AURUM_API_OIDC_CLIENT_SECRET={{ .Data.data.oidc_client_secret }}
        {{- end }}

# Network policies
networkPolicy:
  enabled: true
  allowExternal: true
  allowedIngressPorts: [8080]
  allowedEgressPorts: [5432, 6379, 8123, 9092]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: ingress
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgres
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: trino
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: kafka

# Resource management
resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 2
    memory: 2Gi

# Resource quotas
resourcesQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: "8Gi"
    limits.cpu: "8"
    limits.memory: "16Gi"
    persistentvolumeclaims: "5"
    pods: "10"
    services: "5"
    secrets: "20"
    configmaps: "20"

serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  namespace: ""
  path: /metrics

podAnnotations: {}

podLabels: {}

deploymentAnnotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: api.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
