repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.(md|rst)$
      - id: end-of-file-fixer
        exclude: \.(md|rst)$
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-docstring-first
      - id: debug-statements
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: requirements-txt-fixer

  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        exclude: ^(tests/|docs/)

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--filter-files"]
        exclude: ^(tests/|docs/)

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: ruff (lint)
        args: ["--fix"]
        additional_dependencies: []
      - id: ruff-format
        name: ruff (format)
        additional_dependencies: []

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']
        exclude: ^(tests/|docs/)

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        exclude: ^(tests/|docs/)
        args: [
          "--ignore-missing-imports",
          "--no-strict-optional",
          "--warn-redundant-casts",
          "--warn-unused-ignores",
          "--warn-return-any",
          "--warn-unused-configs",
          "--warn-unreachable"
        ]

  - repo: local
    hooks:
      - id: check-requirements
        name: Check requirements files
        entry: python -c
        args: [
          "import sys; exec(open('scripts/check_requirements.py').read())"
        ]
        language: system
        files: ^(requirements.*\.txt|pyproject\.toml)$
        pass_filenames: false

      - id: check-imports
        name: Check import structure
        entry: python -c
        args: [
          "from aurum.api.app import create_app; print('✅ Imports successful')"
        ]
        language: system
        files: ^src/aurum/.*\.py$
        pass_filenames: false

      - id: check-openapi-spec
        name: Validate OpenAPI spec
        entry: python -c
        args: [
          "from aurum.api.app import create_app; from aurum.core import AurumSettings; import json; app = create_app(AurumSettings()); spec = app.openapi(); json.dump(spec, open('/tmp/openapi.json', 'w')); print('✅ OpenAPI spec generated')"
        ]
        language: system
        files: ^src/aurum/api/.*\.py$
        pass_filenames: false
