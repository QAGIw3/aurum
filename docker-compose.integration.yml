version: '3.8'

services:
  # Core Infrastructure
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: aurum_test
      POSTGRES_USER: aurum_test
      POSTGRES_PASSWORD: aurum_test
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "15432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
      - ./tests/integration/fixtures:/fixtures
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aurum_test -d aurum_test"]
      interval: 5s
      timeout: 3s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=128MB"
      - "-c"
      - "effective_cache_size=512MB"

  redis:
    image: redis:7
    ports:
      - "16379:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_test_data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: schema-registry
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 5

  trino:
    image: trinodb/trino:438
    environment:
      TRINO_LOG_LEVEL: INFO
    ports:
      - "8080:8080"
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/jvm.config:/etc/trino/jvm.config
      - ./trino/config.properties:/etc/trino/config.properties
      - trino_test_data:/data/trino
    healthcheck:
      test: ["CMD", "trino", "--execute", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  nessie:
    image: projectnessie/nessie:latest
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/aurum_test
      QUARKUS_DATASOURCE_USERNAME: aurum_test
      QUARKUS_DATASOURCE_PASSWORD: aurum_test
      NESSIE_CATALOG_DEFAULT_WAREHOUSE: s3://aurum/test/iceberg
    ports:
      - "19120:19120"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-01-18T18-02-05Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_API_REQUESTS_MAX: 1000
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_test_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      AURUM_DATABASE_URL: postgresql://aurum_test:aurum_test@postgres:5432/aurum_test
      AURUM_REDIS_URL: redis://redis:6379
      AURUM_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AURUM_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      AURUM_TRINO_HOST: trino
      AURUM_TRINO_PORT: 8080
      AURUM_ENVIRONMENT: test
      AURUM_LOG_LEVEL: INFO
      AURUM_TESTING: "true"
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
      - schema-registry
      - trino
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./tests/integration/fixtures:/app/tests/integration/fixtures:ro

  airflow:
    image: apache/airflow:2.8.1
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://aurum_test:aurum_test@postgres:5432/aurum_test
      AIRFLOW__WEBSERVER__SECRET_KEY: test-secret-key
      AIRFLOW__CORE__FERNET_KEY: test-fernet-key
      AURUM_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AURUM_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      AURUM_POSTGRES_URL: postgresql://aurum_test:aurum_test@postgres:5432/aurum_test
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - kafka
      - schema-registry
    volumes:
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./tests/integration/airflow:/opt/airflow/tests:ro
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Infrastructure
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      AURUM_DATABASE_URL: postgresql://aurum_test:aurum_test@postgres:5432/aurum_test
      AURUM_REDIS_URL: redis://redis:6379
      AURUM_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AURUM_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      AURUM_TRINO_HOST: trino
      AURUM_TRINO_PORT: 8080
      AURUM_API_URL: http://api:8000
      PYTHONPATH: /app/src
    depends_on:
      - postgres
      - redis
      - kafka
      - schema-registry
      - trino
      - api
    volumes:
      - ./tests:/app/tests:ro
      - ./src:/app/src:ro
      - ./config:/app/config:ro
    command: ["pytest", "tests/integration/", "-v", "--tb=short", "--junitxml=/app/test-results.xml"]
    profiles:
      - test

volumes:
  postgres_test_data:
  redis_test_data:
  kafka_test_data:
  trino_test_data:
  minio_test_data:
