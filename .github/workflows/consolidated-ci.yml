name: '🚀 Consolidated CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      enable_optimization:
        description: 'Enable optimized build pipeline'
        required: false
        default: true
        type: boolean
      enable_security_scan:
        description: 'Run security scans'
        required: false
        default: true
        type: boolean

# Feature flags for CI/CD optimization
env:
  USE_CONSOLIDATED_PIPELINE: ${{ inputs.enable_optimization || 'true' }}
  ENABLE_SECURITY_SCAN: ${{ inputs.enable_security_scan || 'true' }}
  CI_MIGRATION_PHASE: '2'
  CACHE_VERSION: 'v2'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write
  security-events: write
  actions: write
  checks: write
  pull-requests: write
  statuses: write

jobs:
  # Phase 1: Pre-flight checks and validation
  preflight:
    name: '🔍 Pre-flight Checks'
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should_skip }}
      changes: ${{ steps.changes.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if build should be skipped
        id: skip-check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_skip=false" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect changes
        id: changes
        run: |
          # Use git to determine what changed
          echo "changes=$(git diff --name-only origin/main...HEAD | jq -R -s 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT

  # Phase 2: Quality gates (linting, security, tests)
  quality-gates:
    name: '🛡️ Quality Gates'
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_skip != 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            .venv/
          key: ${{ env.CACHE_VERSION }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-python-${{ matrix.python-version }}-
            ${{ env.CACHE_VERSION }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip uv
          uv pip install --system -e .[dev,test,security]

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure
        continue-on-error: ${{ matrix.python-version == '3.10' }}

      - name: Code quality checks
        run: |
          # Ruff linting
          ruff check . --output-format=github

          # Ruff formatting check
          ruff format --check .

          # MyPy type checking
          mypy src/ --ignore-missing-imports

          # Security linting
          bandit -r src/ -f json -o bandit-report.json || true

          # Dependency security scan
          safety check --json --output safety-report.json || true

      - name: Run tests
        env:
          PYTHONPATH: src
        run: |
          # Unit tests
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

          # Integration tests
          pytest tests/integration/ -v --tb=short

          # Performance tests
          pytest tests/performance/ -v --tb=short || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            *.json
            test-results/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: python-${{ matrix.python-version }}

  # Phase 3: Build and package
  build:
    name: '🔨 Build & Package'
    runs-on: ubuntu-latest
    needs: [preflight, quality-gates]
    if: needs.preflight.outputs.should_skip != 'true' && needs.quality-gates.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: api
            dockerfile: Dockerfile.api
            context: .
          - service: worker
            dockerfile: Dockerfile.worker
            context: .
          - service: collectors
            dockerfile: Dockerfile.collectors
            context: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: false
          platforms: linux/amd64,linux/arm64

  # Phase 4: Deploy to environment
  deploy:
    name: '🚀 Deploy to ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    needs: [preflight, quality-gates, build]
    if: |
      needs.preflight.outputs.should_skip != 'true' &&
      needs.quality-gates.result == 'success' &&
      needs.build.result == 'success' &&
      (github.event_name == 'push' || github.event.inputs.environment == 'dev')

    environment:
      name: ${{ inputs.environment || 'dev' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          # Configure kubectl for the target environment
          echo "Configuring kubectl for ${{ inputs.environment }}"

      - name: Deploy to Kubernetes
        id: deploy
        run: |
          # Use optimized Kustomization based on feature flags
          if [[ "${{ env.USE_CONSOLIDATED_PIPELINE }}" == "true" ]]; then
            echo "Using optimized deployment pipeline"
            kubectl apply -k k8s/optimized-kustomization.yaml
          else
            echo "Using legacy deployment pipeline"
            kubectl apply -f k8s/api/ -f k8s/scenario-worker/
          fi

          # Wait for rollout
          kubectl rollout status deployment/aurum-api -n aurum-${{ inputs.environment }} --timeout=300s
          kubectl rollout status deployment/aurum-scenario-worker -n aurum-${{ inputs.environment }} --timeout=300s

          # Get deployment URL
          echo "url=https://api-${{ inputs.environment }}.example.com" >> $GITHUB_OUTPUT

      - name: Validate deployment
        run: |
          # Run health checks and validation
          echo "Validating deployment health..."
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1

      - name: Run smoke tests
        run: |
          # Run basic smoke tests against the deployment
          echo "Running smoke tests..."

  # Phase 5: Security scanning
  security:
    name: '🔒 Security Scanning'
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: |
      needs.preflight.outputs.should_skip != 'true' &&
      env.ENABLE_SECURITY_SCAN == 'true' &&
      (github.event_name == 'push' || github.event.inputs.enable_security_scan == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scans
        run: |
          # Container security scanning
          echo "Running container security scans..."

          # Dependency vulnerability scanning
          echo "Running dependency vulnerability scans..."

          # Infrastructure security scanning
          echo "Running infrastructure security scans..."

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-reports/
            *.json

  # Phase 6: Performance testing
  performance:
    name: '⚡ Performance Testing'
    runs-on: ubuntu-latest
    needs: [preflight, quality-gates]
    if: |
      needs.preflight.outputs.should_skip != 'true' &&
      needs.quality-gates.result == 'success' &&
      github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          # Load testing
          echo "Running load tests..."

          # Stress testing
          echo "Running stress tests..."

          # Benchmarking
          echo "Running benchmarks..."

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            performance-reports/
            benchmarks/

  # Phase 7: Notification and cleanup
  notify:
    name: '📢 Notification & Cleanup'
    runs-on: ubuntu-latest
    needs: [preflight, quality-gates, build, deploy, security, performance]
    if: always()

    steps:
      - name: Determine workflow status
        id: status
        run: |
          if [[ "${{ needs.quality-gates.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All checks passed! Ready for deployment." >> $GITHUB_OUTPUT
          elif [[ "${{ needs.preflight.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Pre-flight checks failed. Build cancelled." >> $GITHUB_OUTPUT
          elif [[ "${{ needs.quality-gates.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Quality gates failed. Please fix issues before merging." >> $GITHUB_OUTPUT
          else
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=⚠️ Build completed with warnings. Review logs." >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        run: |
          echo "Workflow completed with status: ${{ steps.status.outputs.status }}"
          echo "Message: ${{ steps.status.outputs.message }}"

          # Send Slack notification, email, etc.
          echo "Sending notification to team..."

      - name: Cleanup artifacts
        run: |
          # Clean up old artifacts to save space
          echo "Cleaning up old artifacts..."
          # Implementation would depend on your artifact retention policy
