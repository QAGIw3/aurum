name: CI

on:
  push:
    branches: [ main, master, develop, dev ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Validate OpenAPI schema
        run: |
          python -m openapi_spec_validator openapi/aurum.yaml

      - name: Validate EIA dataset config
        run: |
          python scripts/eia/validate_config.py

      - name: Verify scenario schema snapshots
        run: |
          python scripts/ci/verify_scenario_schema.py

      - name: Lint (ruff)
        run: |
          . .venv/bin/activate 2>/dev/null || true
          ruff check src tests

      - name: Static type check (mypy)
        run: |
          mypy --version
          # Incremental adoption: focus on stable modules first
          mypy src/aurum/reference src/aurum/db src/aurum/dq src/aurum/parsers src/aurum/api/service.py src/aurum/api/app.py src/aurum/api/ratelimit.py

      - name: Run tests
        run: |
          pytest -q

      - name: Check unknown units
        env:
          UNKNOWN_UNITS_REPORT: artifacts/unknown_units_report.md
        run: |
          python scripts/ci/report_unknown_units.py files

  build-images:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      API_IMAGE: ghcr.io/${{ github.repository_owner }}/aurum-api
      WORKER_IMAGE: ghcr.io/${{ github.repository_owner }}/aurum-worker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: image-tags
        run: |
          api_tags="${API_IMAGE}:${GITHUB_SHA}"
          worker_tags="${WORKER_IMAGE}:${GITHUB_SHA}"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            api_tags="${api_tags},${API_IMAGE}:latest"
            worker_tags="${worker_tags},${WORKER_IMAGE}:latest"
          fi
          echo "api_tags=${api_tags}" >> "$GITHUB_OUTPUT"
          echo "worker_tags=${worker_tags}" >> "$GITHUB_OUTPUT"

      - name: Build and publish API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.image-tags.outputs.api_tags }}

      - name: Build and publish worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.worker
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.image-tags.outputs.worker_tags }}

  test-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tests inside Docker
        run: |
          chmod +x scripts/dev/test_in_docker.sh
          scripts/dev/test_in_docker.sh

  scenario-smoke:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run scenario smoke test
        env:
          COMPOSE_PROFILES: worker-built
          SCENARIO_WORKER_SERVICE: scenario-worker-built
        run: |
          chmod +x scripts/ci/scenario_smoke.sh
          scripts/ci/scenario_smoke.sh
