name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    - cron: '0 6 * * *'

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  lint-test:
    name: Lint & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Ruff
        run: ruff check .
      - name: Mypy
        run: mypy src
      - name: Pytest
        env:
          PYTHONPATH: src
        run: pytest
      - name: Kafka schema contract check
        if: matrix.python-version == '3.11'
        env:
          PYTHONPATH: src
        run: python3 scripts/kafka/register_schemas.py --validate-only --include-eia
      - name: Schema Registry dry-run
        if: matrix.python-version == '3.11'
        env:
          PYTHONPATH: src
        run: scripts/kafka/bootstrap.sh --schema-registry-url http://localhost:8081 --dry-run

  spectral-lint:
    name: Spectral OpenAPI Lint
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Spectral Lint
        uses: stoplightio/spectral-action@v0.8.7
        with:
          file_glob: 'openapi/**/*.y*ml'

  security-scan:
    name: Container Security Scan
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare SBOM directory
        run: mkdir -p sbom
      - name: Hadolint API Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.api
      - name: Hadolint Worker Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.worker
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.13.0
        with:
          scan-type: fs
          security-checks: vuln,config
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          hide-progress: true
          format: table
          exit-code: '1'
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          output-file: sbom/spdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/spdx.json

  scenario-smoke:
    name: Scenario Smoke
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image for smoke test
        run: |
          docker build \
            --file Dockerfile.api \
            --tag aurum-api:local \
            .

      - name: Run scenario smoke test
        env:
          COMPOSE_PROFILES: worker
        run: |
          bash scripts/ci/scenario_smoke.sh

      - name: Run PPA valuation smoke test
        env:
          COMPOSE_PROFILES: ppa-smoke
        run: |
          bash scripts/ci/ppa_smoke.sh

  dbt-build:
    name: dbt Build
    needs: lint-test
    runs-on: ubuntu-latest
    env:
      DBT_PROFILES_DIR: tests/dbt
      DBT_TARGET: duckdb
      DBT_VARS: '{"iceberg_catalog": "main"}'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Prepare dbt artifacts directory
        run: |
          mkdir -p artifacts/dbt

      - name: dbt seed
        run: |
          dbt seed --profiles-dir "$DBT_PROFILES_DIR" --target "$DBT_TARGET" --vars "$DBT_VARS" --full-refresh

      - name: dbt compile (stg,int,marts)
        run: |
          dbt compile --profiles-dir "$DBT_PROFILES_DIR" --target "$DBT_TARGET" --vars "$DBT_VARS" -m stg int marts

      - name: dbt build (stg,int,marts)
        run: |
          dbt build --profiles-dir "$DBT_PROFILES_DIR" --target "$DBT_TARGET" --vars "$DBT_VARS" -m stg int marts

      - name: dbt docs generate
        run: |
          dbt docs generate --profiles-dir "$DBT_PROFILES_DIR" --target "$DBT_TARGET" --vars "$DBT_VARS"

      - name: Upload dbt docs
        uses: actions/upload-artifact@v4
        with:
          name: dbt-docs
          path: artifacts/dbt

  ge-quality:
    name: Great Expectations Quality Gate
    needs: dbt-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dbt artifacts
        uses: actions/download-artifact@v4
        with:
          name: dbt-docs
          path: artifacts/dbt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Great Expectations suites
        env:
          PYTHONPATH: src
        run: |
          python scripts/quality/run_ge_checks.py --warehouse artifacts/dbt/warehouse.duckdb

  api-docs:
    name: API Docs
    if: github.ref == 'refs/heads/main'
    needs:
      - lint-test
      - spectral-lint
    runs-on: ubuntu-latest
    env:
      DBT_PROFILES_DIR: tests/dbt
      DBT_TARGET: duckdb
      DBT_VARS: '{"iceberg_catalog": "main"}'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Generate dbt documentation
        run: |
          dbt deps
          dbt docs generate --profiles-dir "$DBT_PROFILES_DIR" --target "$DBT_TARGET" --vars "$DBT_VARS"

      - name: Bundle dbt docs
        run: |
          mkdir -p public/dbt
          cp -R target/* public/dbt/

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Prepare API documentation bundle
        run: |
          mkdir -p public/api
          cp -R docs/api/. public/api/
          cp openapi/aurum.yaml public/api/aurum.yaml

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  build-and-publish:
    name: Build & Publish Images
    needs:
      - lint-test
      - spectral-lint
      - security-scan
      - dbt-build
      - scenario-smoke
      - ge-quality
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ghcr.io/aurum/aurum-api:dev
            ghcr.io/aurum/aurum-api:${{ github.sha }}

      - name: Build & push worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.worker
          push: true
          tags: |
            ghcr.io/aurum/aurum-worker:dev
            ghcr.io/aurum/aurum-worker:${{ github.sha }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Build Helm dependencies
        run: |
          helm dependency build k8s/platform/helm

      - name: Package Helm charts
        run: |
          mkdir -p dist/helm-packages
          helm package k8s/api/helm --destination dist/helm-packages
          helm package k8s/scenario-worker/helm --destination dist/helm-packages
          helm package k8s/platform/helm --destination dist/helm-packages

      - name: Push Helm charts to GHCR
        env:
          HELM_REGISTRY: ghcr.io/${{ github.repository_owner }}/helm
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin
          for chart in dist/helm-packages/*.tgz; do
            helm push "$chart" oci://$HELM_REGISTRY
          done

      - name: Generate Helm repository index
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          mkdir -p dist/pages/helm
          cp dist/helm-packages/*.tgz dist/pages/helm/
          helm repo index dist/pages/helm --url https://${REPO_OWNER}.github.io/${REPO_NAME}/helm

      - name: Generate kustomize overlay
        run: |
          mkdir -p dist/kustomize/dev-${GITHUB_SHA}
          cat <<PATCH > dist/kustomize/dev-${GITHUB_SHA}/kustomization.yaml
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          namespace: aurum-dev
          resources:
            - ../../k8s/dev
          images:
            - name: ghcr.io/aurum/aurum-api
              newTag: ${GITHUB_SHA}
            - name: ghcr.io/aurum/aurum-worker
              newTag: ${GITHUB_SHA}
          PATCH
      - name: Upload kustomize overlay
        uses: actions/upload-artifact@v4
        with:
          name: kustomize-images-${{ github.sha }}
          path: dist/kustomize/dev-${{ github.sha }}

      - name: Upload Helm charts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: dist/pages

  deploy-docs:
    name: Deploy Docs
    if: github.ref == 'refs/heads/main'
    needs: api-docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    concurrency:
      group: pages
      cancel-in-progress: false
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

  deploy-helm-pages:
    name: Publish Helm Repo
    needs: build-and-publish
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v3

      - name: Download Helm artifacts
        uses: actions/download-artifact@v4
        with:
          name: helm-charts
          path: public

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v3
