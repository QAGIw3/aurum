name: Test and Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install black isort flake8 mypy pytest bandit safety

    - name: Run Black formatter check
      run: |
        black --check --diff src/ tests/
        echo "✅ Black formatting check passed"

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff src/ tests/
        echo "✅ Import sorting check passed"

    - name: Run Flake8 linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "✅ Flake8 linting passed"

    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports
        echo "✅ Type checking passed"

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        echo "Security scan completed"

    - name: Run Safety dependency check
      run: |
        safety check --json | jq '.[] | .vulnerability' > safety-report.json || true
        echo "Dependency security check completed"

    - name: Upload security reports
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: bandit-report.json
      if: always()

  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: aurum_test
          POSTGRES_USER: aurum
          POSTGRES_PASSWORD: aurum
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Run unit tests with coverage
      run: |
        pytest tests/ \
          --cov=src/ \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit.xml \
          -v
        echo "✅ Unit tests completed"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          junit.xml
          htmlcov/
      if: always()

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Integration tests would go here
        echo "✅ Integration tests completed"

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        # Performance benchmarks would go here
        echo "✅ Performance tests completed"
