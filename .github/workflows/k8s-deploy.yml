name: Kubernetes Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'src/**'
      - 'helm/**'
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed

env:
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG
        chmod 600 $KUBECONFIG

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        find k8s/ -name "*.yaml" -type f -exec sed -i "s|image:.*api:.*|image: ghcr.io/${{ github.repository }}/api:${{ github.sha }}|g" {} \;
        find k8s/ -name "*.yaml" -type f -exec sed -i "s|image:.*aurum-api:.*|image: ghcr.io/${{ github.repository }}/aurum-api:${{ github.sha }}|g" {} \;

        # Apply Kubernetes manifests
        kubectl apply -f k8s/api/
        kubectl apply -f k8s/scenario-worker/

        # Wait for rollout to complete
        kubectl rollout status deployment/api -n aurum-dev --timeout=300s
        kubectl rollout status deployment/scenario-worker -n aurum-dev --timeout=300s

    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl get pods -n aurum-dev -l app=api
        kubectl get pods -n aurum-dev -l app=scenario-worker
        kubectl get svc -n aurum-dev

    - name: Run smoke tests
      run: |
        set -euo pipefail

        kubectl wait --for=condition=available --timeout=120s deployment/api -n aurum-dev
        kubectl wait --for=condition=available --timeout=120s deployment/scenario-worker -n aurum-dev

        kubectl run api-smoke --rm -i --namespace aurum-dev \
          --image=python:3.11-alpine --restart=Never --command -- \
          python - <<'PY'
import json
import sys
import urllib.error
import urllib.request

BASE = "http://aurum-api.aurum-dev.svc.cluster.local:8080"

def fetch(path: str, expect_json: bool = True):
    url = f"{BASE}{path}"
    try:
        with urllib.request.urlopen(url, timeout=10) as resp:
            status = resp.status
            body = resp.read()
    except urllib.error.HTTPError as exc:  # pragma: no cover
        raise SystemExit(f"Request to {url} failed with status {exc.code}: {exc.read().decode()}")
    except Exception as exc:  # pragma: no cover
        raise SystemExit(f"Request to {url} failed: {exc}")

    if status != 200:
        raise SystemExit(f"Unexpected status {status} from {url}")

    text = body.decode()
    if not expect_json:
        return text

    try:
        return json.loads(text)
    except json.JSONDecodeError as exc:
        raise SystemExit(f"Response from {url} was not valid JSON: {exc}\n{text}")


fetch("/health", expect_json=False)

dimensions = fetch("/v1/metadata/dimensions?limit=1")
if "data" not in dimensions:
    raise SystemExit("Metadata dimensions response missing 'data'")

curves = fetch("/v1/curves?limit=1")
if "meta" not in curves:
    raise SystemExit("Curves response missing 'meta'")

scenarios = fetch("/v1/scenarios?limit=1")
if "data" not in scenarios:
    raise SystemExit("Scenarios response missing 'data'")

print("API smoke checks passed", file=sys.stderr)
PY

        echo "âœ… Deployment smoke tests completed successfully"
