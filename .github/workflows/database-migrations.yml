name: Database Migrations

on:
  push:
    branches: [ main ]
    paths:
      - 'db/migrations/**'
      - 'alembic.ini'
  pull_request:
    branches: [ main ]
    paths:
      - 'db/migrations/**'
      - 'alembic.ini'

jobs:
  test-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: aurum_test
          POSTGRES_USER: aurum
          POSTGRES_PASSWORD: aurum
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      clickhouse:
        image: clickhouse/clickhouse-server:23.8
        options: >-
          --health-cmd "clickhouse-client --query 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        pip install alembic clickhouse-driver psycopg2-binary

    - name: Test PostgreSQL migrations
      run: |
        export DATABASE_URL="postgresql://aurum:aurum@localhost:5432/aurum_test"
        alembic upgrade head
        alembic check
        echo "✅ PostgreSQL migrations tested successfully"

    - name: Test ClickHouse migrations
      run: |
        clickhouse-client --host localhost --port 9000 --user default --password aurum --query "
          CREATE DATABASE IF NOT EXISTS aurum_migrations;
          USE aurum_migrations;
          CREATE TABLE IF NOT EXISTS migration_log (
            migration_id String,
            applied_at DateTime DEFAULT now()
          ) ENGINE = MergeTree()
          ORDER BY applied_at;
        "
        echo "✅ ClickHouse setup tested successfully"

    - name: Validate migration safety
      run: |
        # Check for destructive operations
        echo "Checking for destructive operations in migrations..."
        find db/migrations/versions -name "*.py" -exec grep -l "DROP\|DELETE\|TRUNCATE" {} \; | while read file; do
          echo "⚠️  Warning: Potentially destructive operation found in $file"
        done

        # Check migration order dependencies
        echo "Checking migration dependencies..."
        alembic heads | grep -q "head" && echo "✅ All migrations properly ordered" || echo "❌ Migration dependency issue detected"

  deploy-migrations:
    runs-on: ubuntu-latest
    needs: test-migrations
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy PostgreSQL migrations
      run: |
        # This would run against production database
        echo "Deploying PostgreSQL migrations to production..."
        # alembic -c production.ini upgrade head

    - name: Deploy ClickHouse migrations
      run: |
        # This would run against production database
        echo "Deploying ClickHouse migrations to production..."
        # clickhouse-client --host prod-clickhouse --query "migration commands"
