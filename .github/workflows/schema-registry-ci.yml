name: Schema Registry CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/aurum/schema_registry/**'
      - 'seatunnel/jobs/templates/**'
      - 'scripts/ci/register_schemas.py'
      - '.github/workflows/schema-registry-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/aurum/schema_registry/**'
      - 'seatunnel/jobs/templates/**'
      - 'scripts/ci/register_schemas.py'
      - '.github/workflows/schema-registry-ci.yml'

jobs:
  validate-schemas:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov

    - name: Run schema validation tests
      run: |
        python -m pytest tests/schema_registry/ -v

    - name: Check schema files exist
      run: |
        if [ ! -d "seatunnel/jobs/templates" ]; then
          echo "❌ No schema templates directory found"
          exit 1
        fi

        schema_files=$(find seatunnel/jobs/templates -name "*.avsc" | wc -l)
        if [ "$schema_files" -eq 0 ]; then
          echo "⚠️ No .avsc schema files found in templates directory"
        else
          echo "✅ Found $schema_files schema files"
        fi

  register-schemas-dry-run:
    runs-on: ubuntu-latest
    needs: validate-schemas
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install requests

    - name: Run schema registration dry run
      run: |
        python scripts/ci/register_schemas.py \
          --dry-run \
          --schema-dir seatunnel/jobs/templates \
          --registry-url http://localhost:8081 \
          --compatibility BACKWARD \
          --report schema_registration_report.md
      continue-on-error: true

    - name: Upload schema registration report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: schema-registration-report
        path: schema_registration_report.md

  register-schemas:
    runs-on: ubuntu-latest
    needs: validate-schemas
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install requests

    - name: Run schema registration
      env:
        SCHEMA_REGISTRY_URL: ${{ secrets.SCHEMA_REGISTRY_URL }}
        SCHEMA_REGISTRY_USERNAME: ${{ secrets.SCHEMA_REGISTRY_USERNAME }}
        SCHEMA_REGISTRY_PASSWORD: ${{ secrets.SCHEMA_REGISTRY_PASSWORD }}
      run: |
        python scripts/ci/register_schemas.py \
          --schema-dir seatunnel/jobs/templates \
          --registry-url $SCHEMA_REGISTRY_URL \
          --compatibility BACKWARD \
          --fail-on-error \
          --report schema_registration_report.md

    - name: Upload schema registration report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: schema-registration-report-prod
        path: schema_registration_report.md

  validate-compatibility:
    runs-on: ubuntu-latest
    needs: validate-schemas
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install requests

    - name: Check schema compatibility
      run: |
        # This would check compatibility between schemas in the PR
        # For now, just validate that the script can run
        python scripts/ci/register_schemas.py \
          --dry-run \
          --schema-dir seatunnel/jobs/templates \
          --registry-url http://localhost:8081 \
          --compatibility BACKWARD

  schema-registry-health:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install requests

    - name: Check Schema Registry health
      env:
        SCHEMA_REGISTRY_URL: ${{ secrets.SCHEMA_REGISTRY_URL }}
      run: |
        python -c "
        from aurum.schema_registry import SchemaRegistryManager, SchemaRegistryConfig
        from aurum.logging import create_logger

        config = SchemaRegistryConfig(
            base_url='$SCHEMA_REGISTRY_URL',
            default_compatibility_mode='BACKWARD'
        )
        manager = SchemaRegistryManager(config)

        # Check registry status
        status = manager.get_registry_status()
        print('Schema Registry Status:')
        for key, value in status.items():
            print(f'  {key}: {value}')

        if 'error' in status:
            exit(1)
        "

  notify-on-schema-changes:
    runs-on: ubuntu-latest
    needs: [register-schemas]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download schema registration report
      uses: actions/download-artifact@v3
      with:
        name: schema-registration-report-prod
        path: ./

    - name: Notify team of schema changes
      if: always()
      run: |
        # This would integrate with Slack, Teams, or other notification systems
        echo "Schema registration completed"
        cat schema_registration_report.md

        # Example Slack notification (if webhook configured)
        if [ -n \"$SLACK_WEBHOOK_URL\" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{\"text\":\"Schema Registry: New schemas registered successfully\"}' \
            $SLACK_WEBHOOK_URL
        fi
