name: OpenAPI and API Contracts

on:
  push:
    branches: [main, develop]
    paths:
      - 'aurum/docs/api/**'
      - 'aurum/src/aurum/api/**'
      - 'aurum/tests/api/**'
      - 'aurum/scripts/ci/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'aurum/docs/api/**'
      - 'aurum/src/aurum/api/**'
      - 'aurum/tests/api/**'
      - 'aurum/scripts/ci/**'
  workflow_dispatch:

jobs:
  openapi-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Spectral
      run: |
        npm install -g @stoplight/spectral-cli

    - name: Lint OpenAPI specifications
      run: |
        spectral lint aurum/docs/api/**/*.yaml aurum/docs/api/**/*.yml \
          --ruleset .spectral.yml \
          --format text \
          --fail-severity error \
          --output-format text \
          --verbose

    - name: Validate OpenAPI schema compliance
      run: |
        for file in aurum/docs/api/**/*.yaml aurum/docs/api/**/*.yml; do
          echo "Validating $file..."

          # Check for required OpenAPI 3.0 fields
          if ! grep -q "openapi:" "$file"; then
            echo "❌ ERROR: Missing 'openapi' field in $file"
            exit 1
          fi

          if ! grep -q "info:" "$file"; then
            echo "❌ ERROR: Missing 'info' section in $file"
            exit 1
          fi

          if ! grep -q "title:" "$file"; then
            echo "❌ ERROR: Missing 'title' in info section of $file"
            exit 1
          fi

          if ! grep -q "version:" "$file"; then
            echo "❌ ERROR: Missing 'version' in info section of $file"
            exit 1
          fi

          if ! grep -q "paths:" "$file"; then
            echo "❌ ERROR: Missing 'paths' section in $file"
            exit 1
          fi

          echo "✅ $file is valid"
        done

    - name: Comprehensive OpenAPI validation
      run: |
        python aurum/scripts/ci/validate_openapi_complete.py


  avro-compatibility:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install avro-python3

    - name: Check Avro schema compatibility
      run: |
        python scripts/ci/check_avro_compatibility.py

    - name: Validate Avro schemas
      run: |
        # Find all Avro schema files
        schema_files=$(find . -name "*.avsc" -not -path "./.*" | head -20)

        if [ -z "$schema_files" ]; then
          echo "No Avro schema files found"
          exit 0
        fi

        echo "Validating Avro schemas..."
        for file in $schema_files; do
          echo "Validating $file..."

          # Validate schema syntax
          if python -c "
          import json
          import avro.schema
          with open('$file') as f:
              schema_dict = json.load(f)
          try:
              avro.schema.SchemaFromJSONData(schema_dict)
              print(f'✅ $file: Valid Avro schema')
          except Exception as e:
              print(f'❌ $file: Invalid Avro schema - {e}')
              exit(1)
          "; then
            echo "✅ $file: Valid Avro schema"
          else
            echo "❌ $file: Invalid Avro schema"
            exit 1
          fi
        done

        echo "✅ All Avro schemas are valid"

  api-contract-tests:
    runs-on: ubuntu-latest
    needs: [openapi-lint, avro-compatibility]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio httpx

    - name: Run API contract tests
      run: |
        # Run tests that validate API contracts
        python -m pytest tests/api/test_contracts.py -v

    - name: Validate API response schemas
      run: |
        # Test that API responses match OpenAPI schemas
        python scripts/ci/validate_api_responses.py


  notify-on-contract-changes:
    runs-on: ubuntu-latest
    needs: [openapi-lint, avro-compatibility]
    if: github.event_name == 'pull_request' && failure()

    steps:
    - name: Notify team of contract changes
      run: |
        echo "Contract validation failed. Please review the following checks:"
        echo "- OpenAPI lint/structure/examples/security (Spectral + custom checks)"
        echo "- Avro schema compatibility"
        echo "- API contract tests"
        echo "\nTips:"
        echo "- Regenerate spec: make docs-openapi && make docs-openapi-validate"
        echo "- See CI artifacts from 'Build Documentation' and 'OpenAPI Generate and Validate' jobs"

        # This would integrate with Slack, Teams, or other notification systems
        # Example Slack notification (if webhook configured)
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          payload='{"text":"⚠️ API Contract Validation Failed. Check OpenAPI validation, Avro compatibility, and API contract tests. See CI artifacts for details."}'
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
        fi
