# Feature flags for Kubernetes optimization
k8sFeatures:
  useOptimizedTemplates: true
  enableHPA: true
  enablePDB: true
  enableServiceMonitor: true
  enableNetworkPolicy: true
  migrationPhase: "2"  # 1=legacy, 2=optimized, 3=unified

# Application configuration
app:
  name: aurum-api
  component: api
  version: "1.0.0"

# Deployment configuration
deployment:
  replicas: 3
  maxUnavailable: 1
  maxSurge: 1

# Service account configuration
serviceAccount:
  name: aurum-api-sa
  annotations: {}

# Image configuration
image:
  repository: ghcr.io/aurum/aurum-api
  tag: latest
  pullPolicy: IfNotPresent

# Container configuration
container:
  port: 8080
  portName: http

# ConfigMap and Secret configuration
configMap:
  name: aurum-api-config

secret:
  name: aurum-api-secrets

# Monitoring configuration
monitoring:
  metricsEnabled: true
  metricsPort: 8080
  metricsPath: /metrics

# Health checks configuration
healthChecks:
  startup:
    enabled: true
    path: /ready
    port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 12
    successThreshold: 1

  readiness:
    enabled: true
    path: /ready
    port: http
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  liveness:
    enabled: true
    path: /health
    port: http
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

# Lifecycle configuration
lifecycle:
  enabled: true
  preStopCommand: sleep 30

# Resource configuration
resources:
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeralStorage: 100Mi
  limits:
    cpu: "2"
    memory: 2Gi
    ephemeralStorage: 1Gi

# Security configuration
security:
  capabilities:
    add: []

# Volumes configuration
volumes: []

# Cache configuration
cache:
  enabled: true
  mountPath: /app/cache
  sizeLimit: 100Mi

# Affinity configuration
affinity:
  enabled: true
  podAntiAffinity: true
  topologyKey: kubernetes.io/hostname

# Tolerations
tolerations:
  - key: dedicated
    operator: Exists
    effect: NoSchedule
  - key: spot
    operator: Exists
    effect: NoSchedule

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 2
  maxUnavailable: 1

# Service configuration
service:
  type: ClusterIP
  port: 8080
  annotations: {}

# Service Monitor (Prometheus)
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  namespace: ""
  path: /metrics

# Network Policy
networkPolicy:
  enabled: true
  allowExternal: true
  allowedIngressPorts: [8080]
  allowedEgressPorts: [5432, 6379, 8123, 9092]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: ingress
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgres
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: trino
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: kafka

# Resource Quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: "8Gi"
    limits.cpu: "8"
    limits.memory: "16Gi"
    persistentvolumeclaims: "5"
    pods: "10"
    services: "5"
    secrets: "20"
    configmaps: "20"

# Annotations and Labels
podAnnotations: {}
podLabels: {}
deploymentAnnotations: {}
nodeSelector: {}
tolerations: []
affinity: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: api.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Vault integration
vault:
  enabled: true
  role: aurum-api
  agent:
    enabled: true
    configMap: vault-agent-config
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: aurum-api
      vault.hashicorp.com/agent-inject-secret-config: aurum/config
  secrets:
    - path: aurum/config
      template: |
        {{- with secret "aurum/config" -}}
        AURUM_API_JWT_SECRET={{ .Data.data.jwt_secret }}
        AURUM_API_OIDC_CLIENT_ID={{ .Data.data.oidc_client_id }}
        AURUM_API_OIDC_CLIENT_SECRET={{ .Data.data.oidc_client_secret }}
        {{- end }}

# Environment variables (passed to ConfigMap)
config:
  AURUM_API_TRINO_HOST: trino.aurum-dev.svc.cluster.local
  AURUM_API_TRINO_PORT: "8080"
  AURUM_API_TRINO_USER: aurum
  AURUM_API_TRINO_SCHEME: http
  AURUM_APP_DB_DSN: postgresql://aurum@postgres.aurum-dev.svc.cluster.local:5432/aurum
  AURUM_API_REDIS_URL: redis://redis.aurum-dev.svc.cluster.local:6379/0
  AURUM_OTEL_SERVICE_NAME: aurum-api
  AURUM_OTEL_EXPORTER_ENDPOINT: http://jaeger-collector.aurum-dev.svc.cluster.local:4317
  AURUM_OTEL_EXPORTER_INSECURE: "true"

# Secrets (passed to Secret)
secrets:
  AURUM_API_JWT_SECRET: change-me
  AURUM_API_OIDC_CLIENT_ID: changeme-client
  AURUM_API_OIDC_CLIENT_SECRET: changeme-secret
  TRINO_PASSWORD: ""
  REDIS_PASSWORD: ""
  AURUM_APP_DB_PASSWORD: aurum
