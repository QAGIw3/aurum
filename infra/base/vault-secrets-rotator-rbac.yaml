---
# Service Account for Vault secrets rotation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aurum-secrets-rotator
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
  annotations:
    # Security annotations
    vault.security.banzaicloud.io/vault-role: "aurum-secrets-rotator"
    # Monitoring annotations
    prometheus.io/scrape: "true"

---
# Role with minimal permissions for secrets rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aurum-secrets-rotator
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
rules:
  # Allow reading secrets needed for rotation
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
    resourceNames:
      - "vault-root-token"  # Only the specific token we need

  # Allow creating events for monitoring
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---
# RoleBinding to grant the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aurum-secrets-rotator
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aurum-secrets-rotator
subjects:
  - kind: ServiceAccount
    name: aurum-secrets-rotator
    namespace: aurum-dev

---
# ClusterRole for system-level resources needed for monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aurum-secrets-rotator-monitoring
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
rules:
  # Allow getting nodes for monitoring (read-only)
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]

  # Allow accessing metrics endpoints
  - apiGroups: [""]
    resources: ["services", "endpoints"]
    verbs: ["get", "list", "watch"]

  # Allow reading namespace information
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
    resourceNames:
      - "aurum-dev"

---
# ClusterRoleBinding to grant monitoring permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aurum-secrets-rotator-monitoring
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aurum-secrets-rotator-monitoring
subjects:
  - kind: ServiceAccount
    name: aurum-secrets-rotator
    namespace: aurum-dev

---
# NetworkPolicy for secure communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: aurum-secrets-rotation
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
spec:
  podSelector:
    matchLabels:
      app: vault
      component: secrets-rotation

  policyTypes:
    - Ingress
    - Egress

  ingress:
    # Allow traffic from Kubernetes API server for health checks
    - from: []
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9102  # Metrics port

  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

    # Allow HTTPS to Vault
    - to:
        - podSelector:
            matchLabels:
              app: vault
              component: server
      ports:
        - protocol: TCP
          port: 8200

    # Allow outbound connections for external services (restrictive)
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

  # Default deny all other traffic
  - to: []
    ports:
      - protocol: TCP
        port: 1

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: aurum-secrets-rotation
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
spec:
  # Allow disruption of 0 pods during rotation (important for security)
  minAvailable: 0
  selector:
    matchLabels:
      app: vault
      component: secrets-rotation

---
# ResourceQuota for the rotation jobs
apiVersion: v1
kind: ResourceQuota
metadata:
  name: aurum-secrets-rotation-quota
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
spec:
  hard:
    requests.cpu: "100m"
    requests.memory: "128Mi"
    limits.cpu: "500m"
    limits.memory: "1Gi"
    persistentvolumeclaims: "0"  # No persistent storage needed
    pods: "5"  # Limit concurrent jobs
    services: "0"
    secrets: "1"
    configmaps: "1"

---
# LimitRange for container resource limits
apiVersion: v1
kind: LimitRange
metadata:
  name: aurum-secrets-rotation-limits
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
spec:
  limits:
    - default:
        memory: 256Mi
        cpu: 200m
      defaultRequest:
        memory: 64Mi
        cpu: 50m
      type: Container

---
# Security policies and controls
apiVersion: v1
kind: ConfigMap
metadata:
  name: aurum-secrets-rotation-config
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
data:
  # Security configuration
  security-policies.yaml: |
    policies:
      - name: "Minimum Secret Rotation Period"
        description: "Secrets must be rotated at least every 90 days"
        enforcement: "strict"
        grace_period_days: 7

      - name: "Unique Service Account"
        description: "Use dedicated service account for rotation"
        enforcement: "strict"

      - name: "Network Isolation"
        description: "Rotation jobs must be network isolated"
        enforcement: "strict"

      - name: "Audit Logging"
        description: "All rotation activities must be logged"
        enforcement: "strict"

      - name: "Resource Limits"
        description: "Resource limits must be enforced"
        enforcement: "strict"

  # Monitoring configuration
  monitoring-config.yaml: |
    monitoring:
      enabled: true
      metrics_port: 9102
      health_check_path: "/health"
      log_level: "info"

      alerts:
        - name: "RotationJobFailed"
          description: "Secrets rotation job failed"
          severity: "critical"
          threshold: "1"

        - name: "RotationJobStuck"
          description: "Secrets rotation job is stuck"
          severity: "warning"
          threshold: "300"  # 5 minutes

        - name: "VaultConnectionFailed"
          description: "Unable to connect to Vault"
          severity: "critical"
          threshold: "3"

  # Compliance configuration
  compliance-config.yaml: |
    compliance:
      standards:
        - "SOX"
        - "PCI-DSS"
        - "ISO27001"

      requirements:
        - "Regular key rotation"
        - "Access logging"
        - "Separation of duties"
        - "Audit trails"

      retention:
        logs_days: 365
        reports_days: 90
        backups_days: 30
