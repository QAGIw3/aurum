apiVersion: batch/v1
kind: Job
metadata:
  name: vault-secrets-rotation
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
spec:
  template:
    metadata:
      labels:
        app: vault
        component: secrets-rotation
    spec:
      serviceAccountName: vault
      containers:
      - name: secrets-rotation
        image: hashicorp/vault:1.15.5
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -euo pipefail

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color

          echo -e "${GREEN}🔐 Starting Vault secrets rotation...${NC}"

          # Set Vault address
          export VAULT_ADDR=http://vault.aurum-dev.svc.cluster.local:8200
          export VAULT_TOKEN=$(cat /vault/secrets/token)

          # Function to rotate a secret
          rotate_secret() {
            local secret_path=$1
            local rotation_period=${2:-"30d"}  # Default 30 days

            echo -e "${YELLOW}Rotating secret: $secret_path${NC}"

            # Check if secret exists
            if vault kv get $secret_path >/dev/null 2>&1; then
              # Get current secret metadata
              local metadata=$(vault kv metadata get $secret_path)
              local created_time=$(echo "$metadata" | grep -i "created_time" | awk '{print $2}')
              local version=$(echo "$metadata" | grep -i "current_version" | awk '{print $2}')

              echo "  Current version: $version"
              echo "  Created: $created_time"

              # Rotate the secret by creating a new version
              vault kv put $secret_path \
                rotated_at=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                rotation_period="$rotation_period" \
                rotated_by="automated-rotation-job" \
                previous_version="$version"

              # Update metadata for tracking
              vault kv metadata put $secret_path \
                rotation_period="$rotation_period" \
                last_rotated=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

              echo -e "${GREEN}✅ Secret rotated: $secret_path${NC}"
            else
              echo -e "${RED}❌ Secret not found: $secret_path${NC}"
              return 1
            fi
          }

          # Function to rotate database credentials
          rotate_db_credentials() {
            local db_path=$1
            local db_role=$2

            echo -e "${YELLOW}Rotating database credentials for: $db_role${NC}"

            # Rotate database credentials
            vault write $db_path/creds/$db_role ttl="24h"

            echo -e "${GREEN}✅ Database credentials rotated: $db_role${NC}"
          }

          # Function to rotate encryption keys
          rotate_encryption_key() {
            local key_name=$1

            echo -e "${YELLOW}Rotating encryption key: $key_name${NC}"

            # Rotate the encryption key
            vault write -f transit/keys/$key_name/rotate

            # Get key info
            local key_info=$(vault read transit/keys/$key_name)
            local latest_version=$(echo "$key_info" | grep -i "latest_version" | awk '{print $2}')

            echo "  New latest version: $latest_version"
            echo -e "${GREEN}✅ Encryption key rotated: $key_name${NC}"
          }

          # Function to perform key escrow
          perform_key_escrow() {
            local escrow_key="escrow"
            local data_to_escrow=$1

            echo -e "${YELLOW}Performing key escrow...${NC}"

            # Encrypt data with escrow key
            local encrypted_data=$(vault write transit/encrypt/$escrow_key plaintext=$(echo -n "$data_to_escrow" | base64))

            # Store encrypted data in a safe location
            vault kv put secret/escrow/backup-$(date +%s) \
              encrypted_data="$encrypted_data" \
              original_path="rotation-backup" \
              timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

            echo -e "${GREEN}✅ Key escrow completed${NC}"
          }

          # Main rotation logic
          echo -e "${GREEN}🚀 Beginning secrets rotation cycle...${NC}"

          # 1. Rotate application secrets
          echo -e "${GREEN}📋 Rotating application secrets...${NC}"
          rotate_secret "secret/aurum/api-keys" "30d"
          rotate_secret "secret/aurum/database-credentials" "30d"
          rotate_secret "secret/aurum/external-api-keys" "30d"
          rotate_secret "secret/aurum/jwt-secrets" "90d"

          # 2. Rotate database credentials
          echo -e "${GREEN}🔑 Rotating database credentials...${NC}"
          rotate_db_credentials "database" "aurum-db-user"
          rotate_db_credentials "database" "aurum-readonly-user"

          # 3. Rotate encryption keys
          echo -e "${GREEN}🔐 Rotating encryption keys...${NC}"
          rotate_encryption_key "aurum-encryption"
          rotate_encryption_key "aurum-signing"

          # 4. Perform key escrow
          echo -e "${GREEN}🗝️ Performing key escrow...${NC}"
          perform_key_escrow "Backup of critical rotation metadata"

          # 5. Cleanup old versions
          echo -e "${GREEN}🧹 Cleaning up old secret versions...${NC}"
          vault kv metadata delete secret/aurum/api-keys || true
          vault kv metadata delete secret/aurum/database-credentials || true

          # 6. Generate rotation report
          echo -e "${GREEN}📊 Generating rotation report...${NC}"
          cat > /tmp/rotation-report.json << EOF
          {
            "rotation_timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "rotated_secrets": [
              "secret/aurum/api-keys",
              "secret/aurum/database-credentials",
              "secret/aurum/external-api-keys",
              "secret/aurum/jwt-secrets"
            ],
            "rotated_db_credentials": [
              "aurum-db-user",
              "aurum-readonly-user"
            ],
            "rotated_keys": [
              "aurum-encryption",
              "aurum-signing"
            ],
            "key_escrow_performed": true,
            "status": "completed"
          }
          EOF

          # Store rotation report
          vault kv put secret/rotation-reports/last-rotation report=@/tmp/rotation-report.json

          echo -e "${GREEN}✅ Secrets rotation completed successfully!${NC}"

          # Exit successfully
          exit 0
        env:
        - name: VAULT_ADDR
          value: "http://vault.aurum-dev.svc.cluster.local:8200"
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-root-token
              key: token
        volumeMounts:
        - name: vault-token
          mountPath: /vault/secrets
      volumes:
      - name: vault-token
        secret:
          secretName: vault-root-token
      restartPolicy: OnFailure
  backoffLimit: 3
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-secrets-rotation-schedule
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
spec:
  schedule: "0 2 * * 1"  # Weekly on Monday at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: vault
            component: secrets-rotation
        spec:
          serviceAccountName: vault
          containers:
          - name: secrets-rotation-scheduled
            image: hashicorp/vault:1.15.5
            command: ["/bin/bash", "-c"]
            args:
            - |
              echo "Starting scheduled secrets rotation..."
              kubectl create job vault-secrets-rotation-$(date +%s) --from=cronjob/vault-secrets-rotation-schedule -n aurum-dev
            volumeMounts: []
          volumes: []
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 5
