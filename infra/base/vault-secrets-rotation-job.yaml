apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-secrets-rotation
  namespace: aurum-dev
  labels:
    app: vault
    component: secrets-rotation
    managed-by: aurum-platform
spec:
  # Run weekly on Monday at 2 AM UTC
  schedule: "0 2 * * 1"
  # Don't start new jobs if previous is still running
  concurrencyPolicy: Forbid
  # Give up starting a job if it misses its scheduled time by more than 1 hour
  startingDeadlineSeconds: 3600
  # Keep history of successful and failed jobs
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 5
  # Suspend if needed for maintenance
  suspend: false

  jobTemplate:
    metadata:
      labels:
        app: vault
        component: secrets-rotation
        managed-by: aurum-platform
      annotations:
        # Annotate for monitoring and alerting
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
    spec:
      # Don't restart jobs if they fail - let them fail and retry via CronJob
      backoffLimit: 0
      # TTL after completion (cleanup)
      ttlSecondsAfterFinished: 86400  # 24 hours

      template:
        metadata:
          labels:
            app: vault
            component: secrets-rotation
            managed-by: aurum-platform
          annotations:
            # Security annotations
            container.seccomp.security.alpha.kubernetes.io/default: runtime/default
            vault.security.banzaicloud.io/vault-addr: "https://vault.aurum-dev.svc.cluster.local:8200"
            vault.security.banzaicloud.io/vault-role: "aurum-secrets-rotator"
            # Monitoring annotations
            prometheus.io/scrape: "true"
            prometheus.io/port: "9102"
            prometheus.io/path: "/metrics"

        spec:
          # Use restricted service account
          serviceAccountName: aurum-secrets-rotator
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            fsGroup: 1001

          # Node selection for security
          nodeSelector:
            kubernetes.io/os: linux
            workload-type: security-sensitive

          # Tolerations for dedicated nodes
          tolerations:
          - key: workload-type
            operator: Equal
            value: security-sensitive
            effect: NoSchedule

          # Affinity for better scheduling
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                  - key: workload-type
                    operator: In
                    values: ["security-sensitive"]

          # Init containers for security setup
          initContainers:
          - name: wait-for-vault
            image: curlimages/curl:8.5.0
            command: ["/bin/sh", "-c"]
            args:
            - |
              set -euo pipefail

              echo "üîç Checking Vault connectivity..."

              # Wait for Vault to be ready
              for i in {1..30}; do
                if curl -k -f -s "${VAULT_ADDR}/v1/sys/health" > /dev/null; then
                  echo "‚úÖ Vault is ready"
                  exit 0
                fi
                echo "‚è≥ Waiting for Vault... (attempt $i/30)"
                sleep 2
              done

              echo "‚ùå Vault not ready after 60 seconds"
              exit 1
            env:
            - name: VAULT_ADDR
              value: "https://vault.aurum-dev.svc.cluster.local:8200"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop: ["ALL"]

          # Main rotation container
          containers:
          - name: secrets-rotation
            image: hashicorp/vault:1.15.5
            command: ["/bin/sh", "-c"]
            args:
            - |
              set -euo pipefail

              # Colors for output
              RED='\033[0;31m'
              GREEN='\033[0;32m'
              YELLOW='\033[1;33m'
              BLUE='\033[0;34m'
              NC='\033[0m'

              echo -e "${GREEN}üîê Starting secure Vault secrets rotation...${NC}"
              echo -e "${BLUE}Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')${NC}"

              # Set Vault configuration
              export VAULT_ADDR="https://vault.aurum-dev.svc.cluster.local:8200"
              export VAULT_FORMAT="json"

              # Function to authenticate with Vault
              authenticate_vault() {
                echo -e "${YELLOW}üîë Authenticating with Vault...${NC}"

                # Use Kubernetes service account token for authentication
                export VAULT_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

                # Login via Kubernetes auth
                vault login -method=kubernetes \
                  role=aurum-secrets-rotator \
                  jwt="$VAULT_TOKEN" >/dev/null

                echo -e "${GREEN}‚úÖ Authenticated with Vault${NC}"
              }

              # Function to rotate a secret with proper error handling
              rotate_secret() {
                local secret_path=$1
                local rotation_period=${2:-"30d"}
                local max_retries=3
                local retry_count=0

                while [ $retry_count -lt $max_retries ]; do
                  echo -e "${YELLOW}üîÑ Rotating secret: $secret_path (attempt $((retry_count+1))/$max_retries)${NC}"

                  if vault kv get "$secret_path" >/dev/null 2>&1; then
                    # Get current metadata
                    local metadata
                    if metadata=$(vault kv metadata get "$secret_path" 2>/dev/null); then
                      local version=$(echo "$metadata" | jq -r '.data.current_version // "unknown"')
                      echo "  Current version: $version"
                    fi

                    # Rotate the secret
                    if vault kv put "$secret_path" \
                      rotated_at="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
                      rotation_period="$rotation_period" \
                      rotated_by="aurum-rotation-job" \
                      >/dev/null 2>&1; then

                      # Update metadata
                      vault kv metadata put "$secret_path" \
                        rotation_period="$rotation_period" \
                        last_rotated="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
                        >/dev/null 2>&1

                      echo -e "${GREEN}‚úÖ Secret rotated successfully: $secret_path${NC}"
                      return 0
                    fi
                  else
                    echo -e "${RED}‚ùå Secret not found: $secret_path${NC}"
                    return 1
                  fi

                  retry_count=$((retry_count+1))
                  if [ $retry_count -lt $max_retries ]; then
                    echo "  ‚è≥ Retrying in 5 seconds..."
                    sleep 5
                  fi
                done

                echo -e "${RED}‚ùå Failed to rotate secret after $max_retries attempts: $secret_path${NC}"
                return 1
              }

              # Function to rotate database credentials
              rotate_db_credentials() {
                local db_path=$1
                local db_role=$2

                echo -e "${YELLOW}üîë Rotating database credentials for: $db_role${NC}"

                # Rotate database credentials with TTL
                if vault write "$db_path/creds/$db_role" ttl="24h" >/dev/null 2>&1; then
                  echo -e "${GREEN}‚úÖ Database credentials rotated: $db_role${NC}"
                  return 0
                else
                  echo -e "${RED}‚ùå Failed to rotate database credentials: $db_role${NC}"
                  return 1
                fi
              }

              # Function to rotate encryption keys
              rotate_encryption_key() {
                local key_name=$1

                echo -e "${YELLOW}üîê Rotating encryption key: $key_name${NC}"

                # Rotate the encryption key
                if vault write -f "transit/keys/$key_name/rotate" >/dev/null 2>&1; then
                  local key_info
                  if key_info=$(vault read "transit/keys/$key_name" 2>/dev/null); then
                    local latest_version=$(echo "$key_info" | jq -r '.data.latest_version // "unknown"')
                    echo "  New latest version: $latest_version"
                  fi
                  echo -e "${GREEN}‚úÖ Encryption key rotated: $key_name${NC}"
                  return 0
                else
                  echo -e "${RED}‚ùå Failed to rotate encryption key: $key_name${NC}"
                  return 1
                fi
              }

              # Function to perform key escrow
              perform_key_escrow() {
                local escrow_key="escrow"
                local data_to_escrow=$1

                echo -e "${YELLOW}üóùÔ∏è Performing key escrow...${NC}"

                # Encrypt data with escrow key
                local encrypted_data
                if encrypted_data=$(echo -n "$data_to_escrow" | base64 | vault write -field=ciphertext "transit/encrypt/$escrow_key" plaintext=- 2>/dev/null); then
                  # Store encrypted data
                  vault kv put "secret/escrow/backup-$(date +%s)" \
                    encrypted_data="$encrypted_data" \
                    original_path="rotation-backup" \
                    timestamp="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
                    >/dev/null 2>&1

                  echo -e "${GREEN}‚úÖ Key escrow completed${NC}"
                  return 0
                else
                  echo -e "${RED}‚ùå Failed to perform key escrow${NC}"
                  return 1
                fi
              }

              # Function to cleanup old versions
              cleanup_old_versions() {
                echo -e "${YELLOW}üßπ Cleaning up old secret versions...${NC}"

                # Clean up old versions (keep last 5 versions)
                local secrets_to_cleanup=(
                  "secret/aurum/api-keys"
                  "secret/aurum/database-credentials"
                  "secret/aurum/external-api-keys"
                  "secret/aurum/jwt-secrets"
                )

                for secret_path in "${secrets_to_cleanup[@]}"; do
                  if vault kv metadata get "$secret_path" >/dev/null 2>&1; then
                    # Delete old versions (keep latest 5)
                    vault kv destroy -versions="$(vault kv metadata get "$secret_path" | jq -r '.data.versions | to_entries | sort_by(.key|tonumber) | .[:-5][] | .key' | tr '\n' ',')" "$secret_path" 2>/dev/null || true
                  fi
                done

                echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
              }

              # Function to generate rotation report
              generate_rotation_report() {
                echo -e "${YELLOW}üìä Generating rotation report...${NC}"

                local report_data
                report_data=$(cat << EOF
                {
                  "rotation_timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
                  "job_name": "${K8S_JOB_NAME:-unknown}",
                  "job_namespace": "${K8S_JOB_NAMESPACE:-unknown}",
                  "vault_address": "$VAULT_ADDR",
                  "rotated_secrets": [
                    "secret/aurum/api-keys",
                    "secret/aurum/database-credentials",
                    "secret/aurum/external-api-keys",
                    "secret/aurum/jwt-secrets"
                  ],
                  "rotated_db_credentials": [
                    "aurum-db-user",
                    "aurum-readonly-user"
                  ],
                  "rotated_keys": [
                    "aurum-encryption",
                    "aurum-signing"
                  ],
                  "key_escrow_performed": true,
                  "cleanup_performed": true,
                  "status": "completed",
                  "rotation_id": "$(uuidgen || echo $RANDOM)"
                }
                EOF
                )

                # Store rotation report
                vault kv put "secret/rotation-reports/last-rotation" \
                  report="$report_data" \
                  >/dev/null 2>&1

                echo -e "${GREEN}‚úÖ Rotation report generated${NC}"
              }

              # Main execution
              echo -e "${GREEN}üöÄ Beginning secure secrets rotation cycle...${NC}"

              # Track failures
              FAILED_OPERATIONS=()

              # 1. Authenticate
              if ! authenticate_vault; then
                echo -e "${RED}‚ùå Vault authentication failed${NC}"
                exit 1
              fi

              # 2. Rotate application secrets
              echo -e "${GREEN}üìã Rotating application secrets...${NC}"
              rotate_secret "secret/aurum/api-keys" "30d" || FAILED_OPERATIONS+=("api-keys")
              rotate_secret "secret/aurum/database-credentials" "30d" || FAILED_OPERATIONS+=("database-credentials")
              rotate_secret "secret/aurum/external-api-keys" "30d" || FAILED_OPERATIONS+=("external-api-keys")
              rotate_secret "secret/aurum/jwt-secrets" "90d" || FAILED_OPERATIONS+=("jwt-secrets")

              # 3. Rotate database credentials
              echo -e "${GREEN}üîë Rotating database credentials...${NC}"
              rotate_db_credentials "database" "aurum-db-user" || FAILED_OPERATIONS+=("db-user")
              rotate_db_credentials "database" "aurum-readonly-user" || FAILED_OPERATIONS+=("db-readonly")

              # 4. Rotate encryption keys
              echo -e "${GREEN}üîê Rotating encryption keys...${NC}"
              rotate_encryption_key "aurum-encryption" || FAILED_OPERATIONS+=("encryption-key")
              rotate_encryption_key "aurum-signing" || FAILED_OPERATIONS+=("signing-key")

              # 5. Perform key escrow
              echo -e "${GREEN}üóùÔ∏è Performing key escrow...${NC}"
              perform_key_escrow "Backup of critical rotation metadata - $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || FAILED_OPERATIONS+=("key-escrow")

              # 6. Cleanup old versions
              cleanup_old_versions || FAILED_OPERATIONS+=("cleanup")

              # 7. Generate rotation report
              generate_rotation_report || FAILED_OPERATIONS+=("report-generation")

              # Final status
              if [ ${#FAILED_OPERATIONS[@]} -eq 0 ]; then
                echo -e "${GREEN}‚úÖ All secrets rotated successfully!${NC}"
                echo -e "${GREEN}üìä Rotation completed at: $(date -u +'%Y-%m-%dT%H:%M:%SZ')${NC}"
                exit 0
              else
                echo -e "${RED}‚ùå Some operations failed: ${FAILED_OPERATIONS[*]}${NC}"
                echo -e "${RED}üìä Rotation completed with failures at: $(date -u +'%Y-%m-%dT%H:%M:%SZ')${NC}"
                exit 1
              fi
            env:
            - name: VAULT_ADDR
              value: "https://vault.aurum-dev.svc.cluster.local:8200"
            - name: VAULT_SKIP_VERIFY
              value: "false"
            - name: K8S_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_JOB_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: service-account-token
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true

          # Sidecar container for metrics
          - name: metrics-exporter
            image: prom/node-exporter:v1.7.0
            ports:
            - containerPort: 9102
              name: metrics
            args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --web.listen-address=0.0.0.0:9102
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                memory: "32Mi"
                cpu: "10m"
              limits:
                memory: "64Mi"
                cpu: "50m"
            volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: sys
              mountPath: /host/sys
              readOnly: true

          volumes:
          - name: tmp-volume
            emptyDir: {}
          - name: proc
            hostPath:
              path: /proc
          - name: sys
            hostPath:
              path: /sys
          - name: service-account-token
            projected:
              sources:
              - serviceAccountToken:
                  audience: vault
                  expirationSeconds: 3600
                  path: token
