apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aurum-api.fullname" . }}
{{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "aurum-api.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "aurum-api.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "aurum-api.labels" . | nindent 8 }}
{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- if .Values.vault.enabled }}
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: {{ .Values.vault.role }}
        vault.hashicorp.com/agent-inject-secret-config: {{ .Values.vault.secrets | first | .path }}
        vault.hashicorp.com/agent-inject-template-config: |
          {{- range .Values.vault.secrets }}
          {{- with secret .path }}
          {{ .template }}
          {{- end }}
          {{- end }}
{{- end }}
    spec:
      serviceAccountName: {{ include "aurum-api.fullname" . }}
      securityContext:
        {{- if .Values.securityContext.enabled }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
        {{- if .Values.securityContext.seccompProfile }}
        seccompProfile:
          type: {{ .Values.securityContext.seccompProfile.type }}
        {{- end }}
        {{- end }}
      containers:
        - name: api
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          envFrom:
            - configMapRef:
                name: {{ include "aurum-api.fullname" . }}-config
            - secretRef:
                name: {{ include "aurum-api.fullname" . }}-secrets
          {{- if .Values.vault.enabled }}
            - secretRef:
                name: {{ include "aurum-api.fullname" . }}-vault-secrets
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
              scheme: {{ .Values.livenessProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
              scheme: {{ .Values.readinessProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.httpGet.path }}
              port: {{ .Values.startupProbe.httpGet.port }}
              scheme: {{ .Values.startupProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
          {{- end }}
          resources:
{{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- if .Values.securityContext.enabled }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            capabilities:
              drop:
                - ALL
            {{- end }}
{{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
{{- end }}
      tolerations:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
{{- end }}
