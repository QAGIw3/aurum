[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aurum"
version = "0.1.0"
description = "Shared code and tooling for the Aurum market intelligence platform"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
  {name = "Aurum Team", email = "engineering@aurum.local"}
]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent"
]
dependencies = [
  "boto3>=1.34",
  "numpy>=1.26",
  "pandas>=2.2",
  "python-dateutil>=2.8",
  "requests>=2.32",
  "psycopg[binary]>=3.2",
  "pydantic>=2.7",
  "pydantic-settings>=2.2"
]

[project.optional-dependencies]
ingest = [
  "openpyxl>=3.1",
  "pyarrow>=16.0",
  "xlrd>=2.0",
  "kafka-python>=2.0",
  "confluent-kafka[avro]>=2.5"
]
testing = [
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "fastavro>=1.9.4",
  "pyyaml>=6.0",
  "openapi-spec-validator>=0.7",
  "dbt-core>=1.7",
  "dbt-duckdb>=1.7",
  "jsonschema>=4.17"
]
quality = [
  "ruff>=0.5",
  "mypy>=1.10"
]
iceberg = [
  "pyiceberg>=0.16.0",
  "pyarrow>=16.0"
]
api = [
  "fastapi>=0.110",
  "uvicorn>=0.30",
  "trino>=0.328.0",
  "redis>=5.0",
  "prometheus-client>=0.20",
  "httpx>=0.25",
  "python-jose[cryptography]>=3.3",
  "opentelemetry-api==1.26.0",
  "opentelemetry-sdk==1.26.0",
  "opentelemetry-exporter-otlp-proto-grpc==1.26.0",
  "opentelemetry-instrumentation-fastapi==0.47b0",
  "opentelemetry-instrumentation-logging==0.47b0",
  "opentelemetry-instrumentation-requests==0.47b0",
  "opentelemetry-instrumentation-httpx==0.47b0",
  "opentelemetry-instrumentation-psycopg==0.47b0"
]
worker = [
  "confluent-kafka[avro]==2.5.0",
  "prometheus-client==0.20.0",
  "opentelemetry-api==1.26.0",
  "opentelemetry-sdk==1.26.0",
  "opentelemetry-exporter-otlp-proto-grpc==1.26.0",
  "opentelemetry-instrumentation-logging==0.47b0",
  "rasterio>=1.3",
  "geopandas>=0.14",
  "xarray>=2024.1",
  "shapely>=2.0",
  "pyproj>=3.6"
]
database = [
  "sqlalchemy>=2.0",
  "alembic>=1.13"
]


[project.urls]
"Documentation" = "https://github.com/aurum/dev-docs"
"Source" = "https://github.com/aurum/platform"

[project.scripts]
aurum-unknown-units = "aurum.parsers.unknown_units_cli:main"
aurum-scenario = "aurum.cli.scenario:main"
aurum-drought-worker = "aurum.drought.worker:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra"
markers = [
    "scenario_pipeline: run end-to-end scenario pipeline smoke tests",
]

[tool.ruff]
line-length = 100
select = ["E", "F", "W", "I", "N"]
ignore = ["E501"]

[tool.coverage.run]
branch = true
source = ["aurum"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = true
