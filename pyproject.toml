[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aurum"
version = "0.1.0"
description = "Aurum energy trading platform API"
authors = [
    {name = "Supernova Corp"}
]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    # Core FastAPI and async dependencies
    "fastapi==0.115.6",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.10.3",
    "pydantic-settings==2.7.0",

    # Database dependencies
    "sqlalchemy==2.0.36",
    "alembic==1.13.0",
    "asyncpg==0.30.0",

    # Redis and caching (cluster support is built into redis>=4)
    "redis==5.2.0",

    # Task queue
    "celery==5.4.0",

    # Monitoring and observability
    "prometheus-client==0.19.0",
    "opentelemetry-api==1.21.0",
    "opentelemetry-sdk==1.21.0",
    "opentelemetry-instrumentation==0.42b0",
    "opentelemetry-instrumentation-fastapi==0.42b0",
    "structlog==23.2.0",

    # Security
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-multipart==0.0.6",

    # HTTP client
    "httpx==0.28.1",
    "aiohttp==3.10.10",

    # Data processing
    "pandas==2.2.3",
    "numpy==2.0.2",

    # Configuration
    "dynaconf==3.2.6",

    # Utilities
    "python-dotenv==1.0.0",
    "click==8.1.7",
    "rich==13.7.0",

    # External service dependencies
    "requests==2.31.0",
    "requests-oauthlib==1.3.1",
    "urllib3==2.0.7",
    "pyarrow==18.0.0",
    "confluent-kafka[avro]==2.6.1",
    "fastavro==1.9.7",
    "psycopg2-binary==2.9.9",
    "great-expectations==0.18.6",
    "cryptography==44.0.0",
    "PyJWT==2.8.0",
    "tqdm==4.66.1",
    "backoff==2.2.1",
    "boto3==1.35.72",
    "boto3-stubs==1.34.0",
]

[project.scripts]
aurum-feature = "aurum.cli.feature:main"

[project.optional-dependencies]
test = [
    "pytest==8.3.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "hypothesis==6.92.0",
    "httpx==0.28.1",
    "schemathesis==3.20.0",
]
dev = [
    "black==24.10.0",
    "isort==5.13.2",
    "mypy==1.13.0",
    "ruff==0.8.4",
    "pre-commit==4.0.1",
    "bandit==1.8.0",
    "safety==3.2.8",
    "flake8==7.1.1",
]
api = [
    "fastapi==0.115.6",
    "uvicorn[standard]==0.32.0",
    "pydantic==2.10.3",
    "pydantic-settings==2.7.0",
    "sqlalchemy==2.0.36",
    "alembic==1.13.1",
    "asyncpg==0.30.0",
    "redis==5.2.0",
    "celery==5.4.0",
    "prometheus-client==0.21.0",
    "opentelemetry-api==1.28.0",
    "opentelemetry-sdk==1.28.0",
    "opentelemetry-instrumentation==0.49b0",
    "opentelemetry-instrumentation-fastapi==0.49b0",
    "structlog==24.4.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-multipart==0.0.9",
    "httpx==0.28.1",
    "aiohttp==3.10.10",
    "pandas==2.2.3",
    "numpy==2.0.2",
    "dynaconf==3.2.6",
    "python-dotenv==1.0.0",
    "click==8.1.7",
    "rich==13.9.3",
]
worker = [
    "pandas==2.2.3",
    "numpy==2.0.2",
    "pyarrow==18.0.0",
    "confluent-kafka[avro]==2.6.1",
    "fastavro==1.9.7",
    "psycopg2-binary==2.9.10",
    "asyncpg==0.30.0",
    "great-expectations==0.18.19",
    "python-dotenv==1.0.0",
    "pydantic==2.10.3",
    "pydantic-settings==2.7.0",
    "prometheus-client==0.21.0",
    "cryptography==44.0.0",
    "PyJWT==2.10.1",
    "structlog==24.4.0",
    "click==8.1.7",
    "tqdm==4.67.1",
    "backoff==2.2.1",
    "boto3==1.35.72",
    "boto3-stubs==1.35.72",
    "requests==2.32.3",
    "requests-oauthlib==2.0.0",
    "urllib3==2.2.3",
    "asyncio==3.4.3",
]
ingest = [
    "pandas==2.2.3",
    "numpy==2.0.2",
    "pyarrow==18.0.0",
    "confluent-kafka[avro]==2.6.1",
    "fastavro==1.9.7",
    "psycopg2-binary==2.9.10",
    "asyncpg==0.30.0",
    "great-expectations==0.18.19",
    "python-dotenv==1.0.0",
    "pydantic==2.10.3",
    "pydantic-settings==2.7.0",
    "prometheus-client==0.21.0",
    "cryptography==44.0.0",
    "PyJWT==2.10.1",
    "structlog==24.4.0",
    "click==8.1.7",
    "tqdm==4.67.1",
    "backoff==2.2.1",
    "boto3==1.35.72",
    "boto3-stubs==1.35.72",
    "requests==2.32.3",
    "requests-oauthlib==2.0.0",
    "urllib3==2.2.3",
    "asyncio==3.4.3",
    "geopandas==1.0.1",
    "pyproj==3.6.1",
    "shapely==2.0.7",
    "rasterio==1.4.3",
    "xarray==2024.10.0",
    "xlrd==2.0.2",
    "openpyxl==3.1.5",
    "kafka-python==2.2.15",
    "aiokafka==0.10.0",
    "jsonschema==4.25.1",
    "openapi-spec-validator==0.7.2",
    "spectral==0.1.0",
    "trino==0.336.0",
    "dbt-core==1.8.8",
    "dbt-duckdb==1.9.6",
    "psycopg[binary]==3.2.10",
]
quality = [
    "pytest==8.3.3",
    "pytest-asyncio==0.25.0",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "hypothesis==6.119.0",
    "httpx==0.28.1",
    "black==24.10.0",
    "isort==5.13.2",
    "mypy==1.13.0",
    "ruff==0.8.4",
    "pre-commit==4.0.1",
    "bandit==1.8.0",
    "safety==3.2.8",
    "flake8==7.1.1",
    "great-expectations==0.18.19",
]

[tool.hatch.build.targets.wheel]
packages = ["src/aurum"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "C901",  # too complex (we'll handle this separately)
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/*" = ["PLR2004"]  # Magic values in tests are OK
"scripts/*" = ["PLR2004", "T201"]  # Scripts can use shell and magic values

[tool.ruff.isort]
known-first-party = ["aurum"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
strict_optional = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/aurum",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "property: Property-based tests",
    "slow: Slow running tests",
    "database: Database tests",
    "external: Tests requiring external services",
    "scenario_pipeline: Scenario pipeline tests",
    "asyncio: AsyncIO tests",
]

[tool.coverage.run]
source = ["src/aurum"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "src/aurum/api/versions/*",
    "src/aurum/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess (controlled usage)

[tool.vulnerability-scan]
enabled = true
severity_threshold = "high"
exclude = [
    "GHSA-1234-5678",  # Example: known false positive
]

# Additional security and compliance tools
[tool.pip-audit]
ignore-vulns = [
    "GHSA-1234-5678",  # Example: known false positive
]
severity-threshold = "high"

[tool.safety]
ignore = [
    "GHSA-1234-5678",  # Example: known false positive
]
