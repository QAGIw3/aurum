[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "aurum"
version = "0.1.0"
description = "Aurum energy trading platform API"
authors = ["Supernova Corp"]
readme = "README.md"
packages = [{include = "aurum", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.104.0"
uvicorn = "^0.24.0"
pydantic = "^2.0.0"
sqlalchemy = "^2.0.0"
alembic = "^1.12.0"
asyncpg = "^0.29.0"
redis = "^5.0.0"
celery = "^5.3.0"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
structlog = "^23.2.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
hypothesis = "^6.88.0"
httpx = "^0.25.0"

[tool.poetry.group.dev.dependencies]
black = "^23.12.0"
isort = "^5.13.0"
mypy = "^1.8.0"
ruff = "^0.1.0"
pre-commit = "^3.6.0"
bandit = "^1.7.0"
safety = "^2.4.0"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "C901",  # too complex (we'll handle this separately)
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/*" = ["PLR2004"]  # Magic values in tests are OK
"scripts/*" = ["PLR2004", "T201"]  # Scripts can use shell and magic values

[tool.ruff.isort]
known-first-party = ["aurum"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
strict_optional = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/aurum",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "property: Property-based tests",
    "slow: Slow running tests",
    "database: Database tests",
    "external: Tests requiring external services",
]

[tool.coverage.run]
source = ["src/aurum"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "src/aurum/api/versions/*",
    "src/aurum/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess (controlled usage)

[tool.vulnerability-scan]
enabled = true
severity_threshold = "high"
exclude = [
    "GHSA-1234-5678",  # Example: known false positive
]