version: '3.8'

services:
  # Core Infrastructure
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: aurum
      POSTGRES_USER: aurum
      POSTGRES_PASSWORD: aurum
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aurum -d aurum"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "redis-server"
      - "--maxmemory"
      - "1gb"
      - "--maxmemory-policy"
      - "allkeys-lru"
      - "--appendonly"
      - "yes"
      - "--appendfsync"
      - "everysec"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Services
  aurum-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      AURUM_APP_DB_DSN: postgresql://aurum:aurum@postgres:5432/aurum
      AURUM_CACHE_REDIS_DSN: redis://redis:6379
      AURUM_API_DATA_BACKEND: trino  # Use Trino for E2E tests
      AURUM_API_AUTH_DISABLED: "0"
      AURUM_API_OIDC_ISSUER: https://auth.example.com
      AURUM_API_OIDC_AUDIENCE: aurum-api
      AURUM_API_OIDC_JWKS_URL: https://auth.example.com/.well-known/jwks.json
      AURUM_API_JWT_SECRET: e2e-test-secret-key-for-development-only
      AURUM_RATE_LIMIT_DEFAULT_RPS: "100"
      AURUM_SESSION_TIMEOUT_MINUTES: "480"
      AURUM_SECURITY_AUDIT_ENABLED: "1"
      AURUM_TENANT_ISOLATION_ENABLED: "1"
      AURUM_COMPLIANCE_MODE_ENABLED: "1"
      AURUM_DATA_CLASSIFICATION_LEVEL: "internal"
    volumes:
      - ./config:/app/config:ro
      - ./openapi:/app/openapi:ro
      - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: [
      "uvicorn",
      "aurum.api.app:app",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--workers", "2",
      "--loop", "uvloop",
      "--http", "httptools"
    ]

  aurum-external-data:
    build:
      context: .
      dockerfile: Dockerfile.external
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      aurum-api:
        condition: service_healthy
    ports:
      - "8001:8000"
    environment:
      AURUM_APP_DB_DSN: postgresql://aurum:aurum@postgres:5432/aurum
      AURUM_CACHE_REDIS_DSN: redis://redis:6379
      AURUM_COLLECTOR_CHECKPOINT_DSN: postgresql://aurum:aurum@postgres:5432/aurum
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: aurum-dev-token
      AURUM_COLLECTORS_INTERVAL_SECONDS: "3600"
      AURUM_COLLECTOR_LOG_LEVEL: "INFO"
      # Mock API keys for E2E testing
      FRED_API_KEY: "mock-fred-key"
      EIA_API_KEY: "mock-eia-key"
      NOAA_GHCND_TOKEN: "mock-noaa-token"
    volumes:
      - ./config:/app/config:ro
      - ./kafka/schemas:/app/kafka/schemas:ro
      - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/external"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: [
      "python", "-m", "aurum.external.runner",
      "--providers", "fred,eia,noaa",
      "--loop",
      "--interval", "3600",
      "--log-level", "INFO"
    ]

  # Vault for secrets management (mock for E2E)
  vault:
    image: vault:1.12.0
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: aurum-dev-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana_dashboards.json:/etc/grafana/provisioning/dashboards/aurum-dashboards.json:ro
      - ./config/grafana_datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Testing
  k6:
    image: grafana/k6:latest
    profiles:
      - load_test
      - smoke_test
      - stress_test
    volumes:
      - ./tests/e2e/load:/scripts:ro
    environment:
      K6_PROMETHEUS_RW_SERVER_URL: http://prometheus:9090/api/v1/write
      K6_PROMETHEUS_RW_USERNAME: ""
      K6_PROMETHEUS_RW_PASSWORD: ""

  # E2E Testing Infrastructure
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      aurum-api:
        condition: service_healthy
      aurum-external-data:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AURUM_API_URL: http://aurum-api:8000
      AURUM_EXTERNAL_API_URL: http://aurum-external-data:8000
      AURUM_DB_DSN: postgresql://aurum:aurum@postgres:5432/aurum
      AURUM_REDIS_DSN: redis://redis:6379
    volumes:
      - ./tests:/app/tests:ro
      - ./config:/app/config:ro
      - ./src:/app/src:ro
    command: [
      "pytest",
      "tests/e2e/",
      "-v",
      "--tb=short",
      "--junitxml=/app/test-results/junit.xml",
      "--cov=src/aurum",
      "--cov-report=html:/app/coverage",
      "--cov-report=xml:/app/coverage/coverage.xml"
    ]

  # Data seeding
  data-seeder:
    build:
      context: .
      dockerfile: Dockerfile.seeder
    depends_on:
      postgres:
        condition: service_healthy
      aurum-api:
        condition: service_healthy
    environment:
      AURUM_DB_DSN: postgresql://aurum:aurum@postgres:5432/aurum
      AURUM_API_URL: http://aurum-api:8000
    volumes:
      - ./db/seeds:/app/seeds:ro
      - ./scripts:/app/scripts:ro
    command: [
      "python", "scripts/seed_database.py",
      "--api-url", "http://aurum-api:8000",
      "--seed-path", "/app/seeds"
    ]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: aurum-e2e-network
    driver: bridge
